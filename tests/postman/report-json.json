{
  "collection": {
    "_": {
      "postman_id": "426a63e3-1aaa-4c59-8bdc-f360110d192d"
    },
    "item": [
      {
        "id": "96f9bc0b-4dfc-4026-a376-000b189b95f8",
        "name": "pet",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "0220f68b-772c-4a9c-9ab3-f4d371fcd6ea",
            "name": "{petId}",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "3d40f6d8-05a8-4499-b2eb-edf3691fb92b",
                "name": "uploadImage",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "499158d7-b4cc-431b-910b-160b42e5885a",
                    "name": "uploads an image",
                    "request": {
                      "name": "uploads an image",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "url": {
                        "path": [
                          "pet",
                          ":petId",
                          "uploadImage"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) ID of pet to update",
                              "type": "text/plain"
                            },
                            "type": "any",
                            "value": "<long>",
                            "key": "petId"
                          }
                        ]
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "multipart/form-data"
                        },
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "formdata",
                        "formdata": [
                          {
                            "description": {
                              "content": "Additional data to pass to server",
                              "type": "text/plain"
                            },
                            "key": "additionalMetadata",
                            "value": "<string>",
                            "type": "text"
                          },
                          {
                            "description": {
                              "content": "file to upload",
                              "type": "text/plain"
                            },
                            "key": "file",
                            "value": "<string>",
                            "type": "text"
                          }
                        ]
                      },
                      "auth": {
                        "type": "oauth2",
                        "oauth2": [
                          {
                            "type": "any",
                            "value": "read:pets write:pets",
                            "key": "scope"
                          },
                          {
                            "type": "any",
                            "value": "https://petstore.swagger.io/oauth/authorize",
                            "key": "authUrl"
                          },
                          {
                            "type": "any",
                            "value": "implicit",
                            "key": "grant_type"
                          }
                        ]
                      }
                    },
                    "response": [
                      {
                        "_": {
                          "postman_previewlanguage": "json"
                        },
                        "id": "42d59f8e-44ca-40c2-91dc-95a9fcb0ed1d",
                        "name": "successful operation",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "pet",
                              ":petId",
                              "uploadImage"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "multipart/form-data"
                            },
                            {
                              "key": "Accept",
                              "value": "application/json"
                            },
                            {
                              "description": {
                                "content": "Added as a part of security scheme: oauth2",
                                "type": "text/plain"
                              },
                              "key": "Authorization",
                              "value": "<token>"
                            }
                          ],
                          "method": "POST",
                          "body": {
                            "mode": "formdata",
                            "formdata": [
                              {
                                "description": {
                                  "content": "Additional data to pass to server",
                                  "type": "text/plain"
                                },
                                "key": "additionalMetadata",
                                "value": "<string>",
                                "type": "text"
                              },
                              {
                                "description": {
                                  "content": "file to upload",
                                  "type": "text/plain"
                                },
                                "key": "file",
                                "value": "<string>",
                                "type": "text"
                              }
                            ]
                          }
                        },
                        "status": "OK",
                        "code": 200,
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": "{\n  \"code\": \"<integer>\",\n  \"type\": \"<string>\",\n  \"message\": \"<string>\"\n}",
                        "cookie": []
                      }
                    ],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d417262a-c922-4956-9052-bae4259866da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2930e3-17fa-43ce-801f-85445126f8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a938b614-9aa5-4537-b280-146cf59dc864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(`Response status code is ${pm.response.code}`, function () {",
                            "    try {",
                            "        // Logando dados da requisição",
                            "        console.log('Request Method:', pm.request.method);",
                            "        console.log('Request URL:', pm.request.url.toString());",
                            "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                            "",
                            "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                            "            console.log('Request Body (raw):', pm.request.body.raw);",
                            "        } else if (pm.request.body) {",
                            "            console.log('Request Body:', pm.request.body.toString());",
                            "        } else {",
                            "            console.log('Request Body: none');",
                            "        }",
                            "",
                            "        // Verificando e logando o código de status da resposta",
                            "        const responseCode = pm.response.code;",
                            "        console.log('Response Code:', responseCode);",
                            "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                            "",
                            "        // Logando cabeçalhos da resposta",
                            "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                            "",
                            "        // Logando tempo de resposta",
                            "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                            "",
                            "        // Tentando analisar o corpo da resposta como JSON",
                            "        try {",
                            "            const jsonData = pm.response.json();",
                            "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                            "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                            "        } catch (e) {",
                            "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                            "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                            "        }",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao executar o teste:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response time is acceptable`, function () {",
                            "    try {",
                            "        const responseTime = pm.response.responseTime;",
                            "        console.log('Response Time:', responseTime, 'ms');",
                            "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response has JSON content-type`, function () {",
                            "    try {",
                            "        const contentType = pm.response.headers.get('Content-Type');",
                            "        console.log('Content-Type:', contentType);",
                            "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              },
              {
                "id": "c402ba88-20c1-48a0-a63b-30b38cf2e182",
                "name": "Find pet by ID",
                "request": {
                  "name": "Find pet by ID",
                  "description": {
                    "content": "Returns a single pet",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      ":petId"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) ID of pet to return",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<long>",
                        "key": "petId"
                      }
                    ]
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {},
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "any",
                        "value": "api_key",
                        "key": "key"
                      },
                      {
                        "type": "any",
                        "value": "{{apiKey}}",
                        "key": "value"
                      },
                      {
                        "type": "any",
                        "value": "header",
                        "key": "in"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "f612d8e0-3bbe-458b-96ff-439eedf366bf",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: apikey",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<API Key>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "f9ec41bc-5a50-4040-b008-42003ed48900",
                    "name": "Invalid ID supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "description": {
                            "content": "Added as a part of security scheme: apikey",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<API Key>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "62d97023-9158-4727-912a-543a78b717eb",
                    "name": "Pet not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "description": {
                            "content": "Added as a part of security scheme: apikey",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<API Key>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f679cd4-7077-4a7e-8b6f-e9e57a283ed1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c10626b-fd7a-409a-a7b8-87d0545260da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eee5da3f-72a6-4286-be9e-e00f037f418e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "899c4446-8335-4090-bad1-aff6091df17a",
                "name": "Updates a pet in the store with form data",
                "request": {
                  "name": "Updates a pet in the store with form data",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      ":petId"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) ID of pet that needs to be updated",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<long>",
                        "key": "petId"
                      }
                    ]
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/x-www-form-urlencoded"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "Updated name of the pet",
                          "type": "text/plain"
                        },
                        "key": "name",
                        "value": "<string>"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "Updated status of the pet",
                          "type": "text/plain"
                        },
                        "key": "status",
                        "value": "<string>"
                      }
                    ]
                  },
                  "auth": {
                    "type": "oauth2",
                    "oauth2": [
                      {
                        "type": "any",
                        "value": "read:pets write:pets",
                        "key": "scope"
                      },
                      {
                        "type": "any",
                        "value": "https://petstore.swagger.io/oauth/authorize",
                        "key": "authUrl"
                      },
                      {
                        "type": "any",
                        "value": "implicit",
                        "key": "grant_type"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "6fc9feb8-b08e-4749-949e-bdb4a5da7bbc",
                    "name": "Invalid input",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/x-www-form-urlencoded"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "urlencoded",
                        "urlencoded": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "Updated name of the pet",
                              "type": "text/plain"
                            },
                            "key": "name",
                            "value": "<string>"
                          },
                          {
                            "disabled": false,
                            "description": {
                              "content": "Updated status of the pet",
                              "type": "text/plain"
                            },
                            "key": "status",
                            "value": "<string>"
                          }
                        ]
                      }
                    },
                    "status": "Method Not Allowed",
                    "code": 405,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "637436c5-89fa-44f9-85d3-5807284b460c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bf5e1c3-7d14-4003-b8ee-b5c8037cf43c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db1735d5-a719-4645-9fcc-ea7780951371"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "8a7f86cb-a5ad-4077-98e5-f414608c166a",
                "name": "Deletes a pet",
                "request": {
                  "name": "Deletes a pet",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      ":petId"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Pet id to delete",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<long>",
                        "key": "petId"
                      }
                    ]
                  },
                  "header": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "api_key",
                      "value": "<string>"
                    }
                  ],
                  "method": "DELETE",
                  "body": {},
                  "auth": {
                    "type": "oauth2",
                    "oauth2": [
                      {
                        "type": "any",
                        "value": "read:pets write:pets",
                        "key": "scope"
                      },
                      {
                        "type": "any",
                        "value": "https://petstore.swagger.io/oauth/authorize",
                        "key": "authUrl"
                      },
                      {
                        "type": "any",
                        "value": "implicit",
                        "key": "grant_type"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "918a211f-a527-4b8a-92c5-e6f70e4908d4",
                    "name": "Invalid ID supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "disabled": false,
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<string>"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "DELETE",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "cdac6a7c-6988-46aa-a9b1-3f4133825001",
                    "name": "Pet not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "disabled": false,
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<string>"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "DELETE",
                      "body": {}
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d2ef5db-9c7d-484e-8130-46d7e7237fd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db81beb9-3a8a-4e49-988b-aeefe47aa0a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b98544b9-79f4-405b-8a77-b2fa2adea035",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "c7c5069e-5bb3-4dc3-bea0-49c93ee85ab4",
            "name": "Add a new pet to the store",
            "request": {
              "name": "Add a new pet to the store",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                "options": {
                  "raw": {
                    "headerFamily": "json",
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "oauth2",
                "oauth2": [
                  {
                    "type": "any",
                    "value": "read:pets write:pets",
                    "key": "scope"
                  },
                  {
                    "type": "any",
                    "value": "https://petstore.swagger.io/oauth/authorize",
                    "key": "authUrl"
                  },
                  {
                    "type": "any",
                    "value": "implicit",
                    "key": "grant_type"
                  }
                ]
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "4a3fea59-f190-4c7b-aa73-a3177614f1e8",
                "name": "Invalid input",
                "originalRequest": {
                  "url": {
                    "path": [
                      "pet"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": {
                        "content": "Added as a part of security scheme: oauth2",
                        "type": "text/plain"
                      },
                      "key": "Authorization",
                      "value": "<token>"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Method Not Allowed",
                "code": 405,
                "header": [],
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9cb8c96-13d9-4c3f-9fb4-03e785ab7ec3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "64d9b49b-aebe-4810-afa5-15fa8bff2cb1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(`Response status code is ${pm.response.code}`, function () {",
                    "    try {",
                    "        // Logando dados da requisição",
                    "        console.log('Request Method:', pm.request.method);",
                    "        console.log('Request URL:', pm.request.url.toString());",
                    "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                    "",
                    "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                    "            console.log('Request Body (raw):', pm.request.body.raw);",
                    "        } else if (pm.request.body) {",
                    "            console.log('Request Body:', pm.request.body.toString());",
                    "        } else {",
                    "            console.log('Request Body: none');",
                    "        }",
                    "",
                    "        // Verificando e logando o código de status da resposta",
                    "        const responseCode = pm.response.code;",
                    "        console.log('Response Code:', responseCode);",
                    "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                    "",
                    "        // Logando cabeçalhos da resposta",
                    "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                    "",
                    "        // Logando tempo de resposta",
                    "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                    "",
                    "        // Tentando analisar o corpo da resposta como JSON",
                    "        try {",
                    "            const jsonData = pm.response.json();",
                    "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                    "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                    "        } catch (e) {",
                    "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                    "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                    "        }",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao executar o teste:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response time is acceptable`, function () {",
                    "    try {",
                    "        const responseTime = pm.response.responseTime;",
                    "        console.log('Response Time:', responseTime, 'ms');",
                    "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response has JSON content-type`, function () {",
                    "    try {",
                    "        const contentType = pm.response.headers.get('Content-Type');",
                    "        console.log('Content-Type:', contentType);",
                    "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "fdb01201-bc29-48d7-8df4-2e94e3e18e01",
            "name": "Update an existing pet",
            "request": {
              "name": "Update an existing pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                "options": {
                  "raw": {
                    "headerFamily": "json",
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "oauth2",
                "oauth2": [
                  {
                    "type": "any",
                    "value": "read:pets write:pets",
                    "key": "scope"
                  },
                  {
                    "type": "any",
                    "value": "https://petstore.swagger.io/oauth/authorize",
                    "key": "authUrl"
                  },
                  {
                    "type": "any",
                    "value": "implicit",
                    "key": "grant_type"
                  }
                ]
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "939e2853-f63a-4109-b6cb-a490601f4152",
                "name": "Invalid ID supplied",
                "originalRequest": {
                  "url": {
                    "path": [
                      "pet"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": {
                        "content": "Added as a part of security scheme: oauth2",
                        "type": "text/plain"
                      },
                      "key": "Authorization",
                      "value": "<token>"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Bad Request",
                "code": 400,
                "header": [],
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "d6bc0258-8165-4412-afbe-2c4367ea5875",
                "name": "Pet not found",
                "originalRequest": {
                  "url": {
                    "path": [
                      "pet"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": {
                        "content": "Added as a part of security scheme: oauth2",
                        "type": "text/plain"
                      },
                      "key": "Authorization",
                      "value": "<token>"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Not Found",
                "code": 404,
                "header": [],
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "275f85cf-e0cf-41db-970d-f227b154b72c",
                "name": "Validation exception",
                "originalRequest": {
                  "url": {
                    "path": [
                      "pet"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": {
                        "content": "Added as a part of security scheme: oauth2",
                        "type": "text/plain"
                      },
                      "key": "Authorization",
                      "value": "<token>"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Method Not Allowed",
                "code": 405,
                "header": [],
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "138d95bf-c9e3-4d68-870e-59b8e234c118",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8c4f6ed-6231-424f-98b4-d65e67a1256d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "954ee9c0-a330-4863-b422-19d809684bec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(`Response status code is ${pm.response.code}`, function () {",
                    "    try {",
                    "        // Logando dados da requisição",
                    "        console.log('Request Method:', pm.request.method);",
                    "        console.log('Request URL:', pm.request.url.toString());",
                    "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                    "",
                    "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                    "            console.log('Request Body (raw):', pm.request.body.raw);",
                    "        } else if (pm.request.body) {",
                    "            console.log('Request Body:', pm.request.body.toString());",
                    "        } else {",
                    "            console.log('Request Body: none');",
                    "        }",
                    "",
                    "        // Verificando e logando o código de status da resposta",
                    "        const responseCode = pm.response.code;",
                    "        console.log('Response Code:', responseCode);",
                    "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                    "",
                    "        // Logando cabeçalhos da resposta",
                    "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                    "",
                    "        // Logando tempo de resposta",
                    "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                    "",
                    "        // Tentando analisar o corpo da resposta como JSON",
                    "        try {",
                    "            const jsonData = pm.response.json();",
                    "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                    "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                    "        } catch (e) {",
                    "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                    "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                    "        }",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao executar o teste:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response time is acceptable`, function () {",
                    "    try {",
                    "        const responseTime = pm.response.responseTime;",
                    "        console.log('Response Time:', responseTime, 'ms');",
                    "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response has JSON content-type`, function () {",
                    "    try {",
                    "        const contentType = pm.response.headers.get('Content-Type');",
                    "        console.log('Content-Type:', contentType);",
                    "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "9f7335c2-b00e-4db9-a1f1-6fa776ddd80d",
            "name": "findByStatus",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "bb880381-fba0-4410-a8a1-1823459006b6",
                "name": "Finds Pets by status",
                "request": {
                  "name": "Finds Pets by status",
                  "description": {
                    "content": "Multiple status values can be provided with comma separated strings",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      "findByStatus"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Status values that need to be considered for filter",
                          "type": "text/plain"
                        },
                        "key": "status",
                        "value": "available"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Status values that need to be considered for filter",
                          "type": "text/plain"
                        },
                        "key": "status",
                        "value": "available"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {},
                  "auth": {
                    "type": "oauth2",
                    "oauth2": [
                      {
                        "type": "any",
                        "value": "read:pets write:pets",
                        "key": "scope"
                      },
                      {
                        "type": "any",
                        "value": "https://petstore.swagger.io/oauth/authorize",
                        "key": "authUrl"
                      },
                      {
                        "type": "any",
                        "value": "implicit",
                        "key": "grant_type"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "07a43a58-79ed-42ca-a19f-48e0eca9bc84",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          "findByStatus"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) Status values that need to be considered for filter",
                              "type": "text/plain"
                            },
                            "key": "status",
                            "value": "available"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"available\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"pending\"\n  }\n]",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "8d25871a-adb0-4dea-9e77-ec83183d416a",
                    "name": "Invalid status value",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          "findByStatus"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) Status values that need to be considered for filter",
                              "type": "text/plain"
                            },
                            "key": "status",
                            "value": "available"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79a61b56-e0b5-469b-ae13-fcfb8f9227b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd9b7722-1979-46e7-8f6a-8b224aaba9df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "4c3282d6-77d2-4d1f-b828-519e4dc7911d",
            "name": "findByTags",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "971b051b-5f11-4865-bfdb-930759321303",
                "name": "Finds Pets by tags",
                "request": {
                  "name": "Finds Pets by tags",
                  "description": {
                    "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      "findByTags"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Tags to filter by",
                          "type": "text/plain"
                        },
                        "key": "tags",
                        "value": "<string>"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Tags to filter by",
                          "type": "text/plain"
                        },
                        "key": "tags",
                        "value": "<string>"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {},
                  "auth": {
                    "type": "oauth2",
                    "oauth2": [
                      {
                        "type": "any",
                        "value": "read:pets write:pets",
                        "key": "scope"
                      },
                      {
                        "type": "any",
                        "value": "https://petstore.swagger.io/oauth/authorize",
                        "key": "authUrl"
                      },
                      {
                        "type": "any",
                        "value": "implicit",
                        "key": "grant_type"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "f84c6481-ec89-41f8-8d98-84278ed1040d",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          "findByTags"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) Tags to filter by",
                              "type": "text/plain"
                            },
                            "key": "tags",
                            "value": "<string>"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"available\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"pending\"\n  }\n]",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "d9f6f5d5-2dba-4cee-9593-bdaef059c882",
                    "name": "Invalid tag value",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          "findByTags"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) Tags to filter by",
                              "type": "text/plain"
                            },
                            "key": "tags",
                            "value": "<string>"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "626c1e63-accd-4395-8461-55fd307afb73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d49148a-2b7b-471c-8610-3cd9e10c2270"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "182ac331-db6d-4177-895e-83b7a2b8af97"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "dfff00e8-f177-4ac2-a01f-e0cfb1271199",
        "name": "store",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d9e3f823-3987-41e1-89ff-9eeafe2cf3b2",
            "name": "inventory",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "47bd9e7e-96b5-45b3-98e7-5b3fbcea36b5",
                "name": "Returns pet inventories by status",
                "request": {
                  "name": "Returns pet inventories by status",
                  "description": {
                    "content": "Returns a map of status codes to quantities",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "store",
                      "inventory"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {},
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "any",
                        "value": "api_key",
                        "key": "key"
                      },
                      {
                        "type": "any",
                        "value": "{{apiKey}}",
                        "key": "value"
                      },
                      {
                        "type": "any",
                        "value": "header",
                        "key": "in"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "f5ec3f83-08a2-487c-ba54-c6ae4b903bfc",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "store",
                          "inventory"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: apikey",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<API Key>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n  \"ipsum3\": \"<integer>\",\n  \"ullamco_\": \"<integer>\"\n}",
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30d15eb6-a714-4505-92ba-56cfa1444342",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edb6076e-41da-4d5b-9301-a57265dc447e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a954e286-6433-4320-9cce-47188b28e9bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "a5f63e75-0977-4342-acc3-9c175c30be1c",
            "name": "order",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "37596f31-461f-4513-b68c-f115d589cced",
                "name": "Place an order for a pet",
                "request": {
                  "name": "Place an order for a pet",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "store",
                      "order"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "1fda5538-cdef-4e2a-808b-b6356da3ddc8",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "store",
                          "order"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "3a05bb2f-1564-4c06-9b92-a53345f57fc0",
                    "name": "Invalid Order",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "store",
                          "order"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "597ba00c-1f3c-4c77-a78a-6b073c252d22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03bae9d1-36cd-4da0-94c4-19d4b6bcdd07"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "431cc954-9096-497b-8fe7-9701b31cc10a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "f311ca18-0c06-400b-a209-6e40ce6fa793",
                "name": "{orderId}",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "264a1935-7360-4f26-8f41-142b6938ff4d",
                    "name": "Find purchase order by ID",
                    "request": {
                      "name": "Find purchase order by ID",
                      "description": {
                        "content": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
                        "type": "text/plain"
                      },
                      "url": {
                        "path": [
                          "store",
                          "order",
                          ":orderId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) ID of pet that needs to be fetched",
                              "type": "text/plain"
                            },
                            "type": "any",
                            "value": "<long>",
                            "key": "orderId"
                          }
                        ]
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "response": [
                      {
                        "_": {
                          "postman_previewlanguage": "json"
                        },
                        "id": "e0958818-608a-4a5f-b7e4-d2cb00de3349",
                        "name": "successful operation",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "header": [
                            {
                              "key": "Accept",
                              "value": "application/json"
                            }
                          ],
                          "method": "GET",
                          "body": {}
                        },
                        "status": "OK",
                        "code": 200,
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
                        "cookie": []
                      },
                      {
                        "_": {
                          "postman_previewlanguage": "text"
                        },
                        "id": "6087fe77-aa5d-4ba7-acf4-36db74b6f01d",
                        "name": "Invalid ID supplied",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "method": "GET",
                          "body": {}
                        },
                        "status": "Bad Request",
                        "code": 400,
                        "header": [],
                        "cookie": []
                      },
                      {
                        "_": {
                          "postman_previewlanguage": "text"
                        },
                        "id": "5d0577ba-f07e-45ab-bd5a-f25d43c11d20",
                        "name": "Order not found",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "method": "GET",
                          "body": {}
                        },
                        "status": "Not Found",
                        "code": 404,
                        "header": [],
                        "cookie": []
                      }
                    ],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844aa396-447a-499c-b820-79bc78628d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bcaa223-3055-4a1b-ae73-aa482d46aae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(`Response status code is ${pm.response.code}`, function () {",
                            "    try {",
                            "        // Logando dados da requisição",
                            "        console.log('Request Method:', pm.request.method);",
                            "        console.log('Request URL:', pm.request.url.toString());",
                            "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                            "",
                            "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                            "            console.log('Request Body (raw):', pm.request.body.raw);",
                            "        } else if (pm.request.body) {",
                            "            console.log('Request Body:', pm.request.body.toString());",
                            "        } else {",
                            "            console.log('Request Body: none');",
                            "        }",
                            "",
                            "        // Verificando e logando o código de status da resposta",
                            "        const responseCode = pm.response.code;",
                            "        console.log('Response Code:', responseCode);",
                            "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                            "",
                            "        // Logando cabeçalhos da resposta",
                            "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                            "",
                            "        // Logando tempo de resposta",
                            "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                            "",
                            "        // Tentando analisar o corpo da resposta como JSON",
                            "        try {",
                            "            const jsonData = pm.response.json();",
                            "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                            "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                            "        } catch (e) {",
                            "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                            "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                            "        }",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao executar o teste:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response time is acceptable`, function () {",
                            "    try {",
                            "        const responseTime = pm.response.responseTime;",
                            "        console.log('Response Time:', responseTime, 'ms');",
                            "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response has JSON content-type`, function () {",
                            "    try {",
                            "        const contentType = pm.response.headers.get('Content-Type');",
                            "        console.log('Content-Type:', contentType);",
                            "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "d51afefc-5362-4d9e-bef5-a3675f73ad79",
                    "name": "Delete purchase order by ID",
                    "request": {
                      "name": "Delete purchase order by ID",
                      "description": {
                        "content": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
                        "type": "text/plain"
                      },
                      "url": {
                        "path": [
                          "store",
                          "order",
                          ":orderId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) ID of the order that needs to be deleted",
                              "type": "text/plain"
                            },
                            "type": "any",
                            "value": "<long>",
                            "key": "orderId"
                          }
                        ]
                      },
                      "method": "DELETE",
                      "body": {}
                    },
                    "response": [
                      {
                        "_": {
                          "postman_previewlanguage": "text"
                        },
                        "id": "c4ec16b9-be0e-427d-8ab2-4df44772fcff",
                        "name": "Invalid ID supplied",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "method": "DELETE",
                          "body": {}
                        },
                        "status": "Bad Request",
                        "code": 400,
                        "header": [],
                        "cookie": []
                      },
                      {
                        "_": {
                          "postman_previewlanguage": "text"
                        },
                        "id": "b31394d8-54c7-4bf7-bb56-5f98760ab07c",
                        "name": "Order not found",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "method": "DELETE",
                          "body": {}
                        },
                        "status": "Not Found",
                        "code": 404,
                        "header": [],
                        "cookie": []
                      }
                    ],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e70563c-4ef0-43c9-8bc3-90eb970bed1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7147413b-2f0d-4768-9605-15c2ebe2d12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(`Response status code is ${pm.response.code}`, function () {",
                            "    try {",
                            "        // Logando dados da requisição",
                            "        console.log('Request Method:', pm.request.method);",
                            "        console.log('Request URL:', pm.request.url.toString());",
                            "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                            "",
                            "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                            "            console.log('Request Body (raw):', pm.request.body.raw);",
                            "        } else if (pm.request.body) {",
                            "            console.log('Request Body:', pm.request.body.toString());",
                            "        } else {",
                            "            console.log('Request Body: none');",
                            "        }",
                            "",
                            "        // Verificando e logando o código de status da resposta",
                            "        const responseCode = pm.response.code;",
                            "        console.log('Response Code:', responseCode);",
                            "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                            "",
                            "        // Logando cabeçalhos da resposta",
                            "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                            "",
                            "        // Logando tempo de resposta",
                            "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                            "",
                            "        // Tentando analisar o corpo da resposta como JSON",
                            "        try {",
                            "            const jsonData = pm.response.json();",
                            "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                            "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                            "        } catch (e) {",
                            "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                            "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                            "        }",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao executar o teste:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response time is acceptable`, function () {",
                            "    try {",
                            "        const responseTime = pm.response.responseTime;",
                            "        console.log('Response Time:', responseTime, 'ms');",
                            "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response has JSON content-type`, function () {",
                            "    try {",
                            "        const contentType = pm.response.headers.get('Content-Type');",
                            "        console.log('Content-Type:', contentType);",
                            "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e998ab60-fa45-4620-a23f-567f86e84220"
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "3f521e52-e158-4ee5-ace3-5940e191734f",
        "name": "user",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "0ed6f427-dd3d-48e6-9a71-0bf92c601dbc",
            "name": "createWithList",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "77892cc2-9750-44df-96b2-55f6ef8fcccc",
                "name": "Creates list of users with given input array",
                "request": {
                  "name": "Creates list of users with given input array",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      "createWithList"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "96583af5-88e8-4674-bbe0-ef4d4dbe82b6",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "createWithList"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Internal Server Error",
                    "code": 500,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a5b5a5c-366a-4a65-9e21-4b5e6743d7e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8feb840b-393c-49e3-b73b-5b49760233f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "4b13471e-e115-4494-b3ac-6b4ee0b2db31",
            "name": "{username}",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "d02c9e39-286d-45d0-b76b-b85db66858c0",
                "name": "Get user by user name",
                "request": {
                  "name": "Get user by user name",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      ":username"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<string>",
                        "key": "username"
                      }
                    ]
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {}
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "3f1fd4a0-6c42-48a4-9bfe-030a84598f50",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "e28050c5-f6b7-48cd-9b55-82bb16e22255",
                    "name": "Invalid username supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "3a1efbd2-acaa-4cec-b600-d48c1cf32bdf",
                    "name": "User not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e99a8a95-ec37-474f-95ac-71903049ac5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6131ea28-36a7-4291-9a5a-a17218346636"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "3c9df624-e6df-4ccd-8e74-b930a7b33b01",
                "name": "Updated user",
                "request": {
                  "name": "Updated user",
                  "description": {
                    "content": "This can only be done by the logged in user.",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      ":username"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) name that need to be updated",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<string>",
                        "key": "username"
                      }
                    ]
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "37bed2b2-f927-478f-b406-dc87dd2eacaa",
                    "name": "Invalid user supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "PUT",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "e7ba4324-ff36-43d8-81c4-8c3f61dcce79",
                    "name": "User not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "PUT",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f512b35-aa99-4ba3-a2bb-c1a2b048f02c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "959f2457-38eb-4d55-80bd-74d3024cf1cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "cd1ce29e-6f1b-4906-8347-d598f4100c9e",
                "name": "Delete user",
                "request": {
                  "name": "Delete user",
                  "description": {
                    "content": "This can only be done by the logged in user.",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      ":username"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) The name that needs to be deleted",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<string>",
                        "key": "username"
                      }
                    ]
                  },
                  "method": "DELETE",
                  "body": {}
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "a4bcfcb3-56ac-4401-98de-d63d97b53471",
                    "name": "Invalid username supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "4b57f14e-5f45-4de3-bbf4-b62ed9636228",
                    "name": "User not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {}
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ed75b36-7608-47af-9f88-d5a33fda1ff4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79b209a8-a18b-4e40-a570-1be0eefd5596"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ea06791-2acd-44dc-8070-df9bd9172674",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f149f3ec-f882-4049-9821-8892a5716469"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "860518bd-5785-479a-9eb8-fa3fe5c018f3",
            "name": "login",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "8259602a-5e89-413d-8feb-3bd0bdfd71fb",
                "name": "Logs user into the system",
                "request": {
                  "name": "Logs user into the system",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      "login"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) The user name for login",
                          "type": "text/plain"
                        },
                        "key": "username",
                        "value": "<string>"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) The password for login in clear text",
                          "type": "text/plain"
                        },
                        "key": "password",
                        "value": "<string>"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {}
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "d39f8901-3460-4df8-8855-2e08ba82b503",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "login"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) The user name for login",
                              "type": "text/plain"
                            },
                            "key": "username",
                            "value": "<string>"
                          },
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) The password for login in clear text",
                              "type": "text/plain"
                            },
                            "key": "password",
                            "value": "<string>"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "date in UTC when token expires",
                          "type": "text/plain"
                        },
                        "key": "X-Expires-After",
                        "value": "<dateTime>"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "calls per hour allowed by the user",
                          "type": "text/plain"
                        },
                        "key": "X-Rate-Limit",
                        "value": "<integer>"
                      }
                    ],
                    "body": "<string>",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "49b29697-29a6-4b8e-a3ee-ccec4b6bb4b5",
                    "name": "Invalid username/password supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "login"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) The user name for login",
                              "type": "text/plain"
                            },
                            "key": "username",
                            "value": "<string>"
                          },
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) The password for login in clear text",
                              "type": "text/plain"
                            },
                            "key": "password",
                            "value": "<string>"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8e840c6-4c51-4bf4-b383-40c60d68d282",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4284f671-4772-4bfe-afbc-247f87a19536"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4be186c-e308-4c72-87b1-10db6dcafebe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2dff5c8a-4368-4a6a-8beb-67809827f321"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "69f57989-5aa2-4a8d-b46a-8f064ea39c23",
            "name": "logout",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "6ff95b33-968c-4e2f-901e-d8f2f052d40a",
                "name": "Logs out current logged in user session",
                "request": {
                  "name": "Logs out current logged in user session",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      "logout"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "body": {}
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "d5ea79e7-9937-4a65-aed6-bf566244ff89",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "logout"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Internal Server Error",
                    "code": 500,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4a99954-4915-4281-99f7-a5ac9dab46e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14856e00-ff92-48b1-bedd-421460408736"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9270af0-9f55-428f-998a-153ca2626690"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "8c3d411b-1ec1-45fd-adea-ff5ba49b5193",
            "name": "createWithArray",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "5546190c-f332-4839-82c5-089ec3db3ab8",
                "name": "Creates list of users with given input array",
                "request": {
                  "name": "Creates list of users with given input array",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      "createWithArray"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "1ba74aab-5a7d-4dc1-8b3b-35a113d2095f",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "createWithArray"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Internal Server Error",
                    "code": 500,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17ebbbd1-47a4-45ae-9fb8-496480a02841",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bdceffd-c794-417a-86a3-9e28824db37b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "6955d0b7-749c-41c3-afdc-5d71d5ae4b47",
            "name": "Create user",
            "request": {
              "name": "Create user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                "options": {
                  "raw": {
                    "headerFamily": "json",
                    "language": "json"
                  }
                }
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "302f8220-5c0c-431b-85e5-36d8a62c0c72",
                "name": "successful operation",
                "originalRequest": {
                  "url": {
                    "path": [
                      "user"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Internal Server Error",
                "code": 500,
                "header": [],
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b134647-3bee-462d-b483-1f9a12645535",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "71f4a423-265f-4647-834f-71e202341f40"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(`Response status code is ${pm.response.code}`, function () {",
                    "    try {",
                    "        // Logando dados da requisição",
                    "        console.log('Request Method:', pm.request.method);",
                    "        console.log('Request URL:', pm.request.url.toString());",
                    "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                    "",
                    "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                    "            console.log('Request Body (raw):', pm.request.body.raw);",
                    "        } else if (pm.request.body) {",
                    "            console.log('Request Body:', pm.request.body.toString());",
                    "        } else {",
                    "            console.log('Request Body: none');",
                    "        }",
                    "",
                    "        // Verificando e logando o código de status da resposta",
                    "        const responseCode = pm.response.code;",
                    "        console.log('Response Code:', responseCode);",
                    "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                    "",
                    "        // Logando cabeçalhos da resposta",
                    "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                    "",
                    "        // Logando tempo de resposta",
                    "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                    "",
                    "        // Tentando analisar o corpo da resposta como JSON",
                    "        try {",
                    "            const jsonData = pm.response.json();",
                    "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                    "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                    "        } catch (e) {",
                    "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                    "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                    "        }",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao executar o teste:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response time is acceptable`, function () {",
                    "    try {",
                    "        const responseTime = pm.response.responseTime;",
                    "        console.log('Response Time:', responseTime, 'ms');",
                    "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response has JSON content-type`, function () {",
                    "    try {",
                    "        const contentType = pm.response.headers.get('Content-Type');",
                    "        console.log('Content-Type:', contentType);",
                    "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "https://petstore.swagger.io/v2",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "426a63e3-1aaa-4c59-8bdc-f360110d192d",
      "name": "Swagger Petstore",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "local-environment",
    "name": "Local Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:45610",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "BearerYourTokenHere",
        "key": "tiger_token"
      }
    ]
  },
  "globals": {
    "id": "c0b54a5f-2ce6-4866-95ae-5260affd4c03",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 40,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 60,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 9.8,
      "responseMin": 4,
      "responseMax": 48,
      "responseSd": 9.211948762341224,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719706573065,
      "completed": 1719706574042
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d"
        },
        "item": {
          "id": "499158d7-b4cc-431b-910b-160b42e5885a",
          "name": "uploads an image",
          "request": {
            "name": "uploads an image",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                ":petId",
                "uploadImage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of pet to update",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "petId"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "description": {
                    "content": "Additional data to pass to server",
                    "type": "text/plain"
                  },
                  "key": "additionalMetadata",
                  "value": "<string>",
                  "type": "text"
                },
                {
                  "description": {
                    "content": "file to upload",
                    "type": "text/plain"
                  },
                  "key": "file",
                  "value": "<string>",
                  "type": "text"
                }
              ]
            },
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "42d59f8e-44ca-40c2-91dc-95a9fcb0ed1d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId",
                    "uploadImage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "description": {
                        "content": "Additional data to pass to server",
                        "type": "text/plain"
                      },
                      "key": "additionalMetadata",
                      "value": "<string>",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "file to upload",
                        "type": "text/plain"
                      },
                      "key": "file",
                      "value": "<string>",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"code\": \"<integer>\",\n  \"type\": \"<string>\",\n  \"message\": \"<string>\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d417262a-c922-4956-9052-bae4259866da",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "fc2930e3-17fa-43ce-801f-85445126f8c7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a938b614-9aa5-4537-b280-146cf59dc864",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "uploads an image",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "pet",
              "<long>",
              "uploadImage"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "multipart/form-data"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cd3fbff3-ffbd-405b-8873-1aa491a5ee34",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 292,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "description": {
                  "content": "Additional data to pass to server",
                  "type": "text/plain"
                },
                "key": "additionalMetadata",
                "value": "<string>",
                "type": "text"
              },
              {
                "description": {
                  "content": "file to upload",
                  "type": "text/plain"
                },
                "key": "file",
                "value": "<string>",
                "type": "text"
              }
            ]
          },
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "7b5aaf0e-ca4c-49b2-a9dd-9543773e9c99",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 48,
          "responseSize": 22
        },
        "id": "499158d7-b4cc-431b-910b-160b42e5885a",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622"
        },
        "item": {
          "id": "c402ba88-20c1-48a0-a63b-30b38cf2e182",
          "name": "Find pet by ID",
          "request": {
            "name": "Find pet by ID",
            "description": {
              "content": "Returns a single pet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                ":petId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of pet to return",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "petId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {},
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "any",
                  "value": "api_key",
                  "key": "key"
                },
                {
                  "type": "any",
                  "value": "{{apiKey}}",
                  "key": "value"
                },
                {
                  "type": "any",
                  "value": "header",
                  "key": "in"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f612d8e0-3bbe-458b-96ff-439eedf366bf",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<API Key>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "f9ec41bc-5a50-4040-b008-42003ed48900",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<API Key>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "62d97023-9158-4727-912a-543a78b717eb",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<API Key>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0f679cd4-7077-4a7e-8b6f-e9e57a283ed1",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7c10626b-fd7a-409a-a7b8-87d0545260da"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eee5da3f-72a6-4286-be9e-e00f037f418e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Find pet by ID",
          "description": {
            "content": "Returns a single pet",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "pet",
              "<long>"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "api_key",
              "value": "{{apiKey}}",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "395f6d27-65d4-4e2e-a4dd-9fa97eeff3ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {},
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "any",
                "value": "api_key",
                "key": "key"
              },
              {
                "type": "any",
                "value": "{{apiKey}}",
                "key": "value"
              },
              {
                "type": "any",
                "value": "header",
                "key": "in"
              }
            ]
          }
        },
        "response": {
          "id": "bc66469c-1c6f-4d3b-8edf-457ddfac054b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 22
        },
        "id": "c402ba88-20c1-48a0-a63b-30b38cf2e182",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c"
        },
        "item": {
          "id": "899c4446-8335-4090-bad1-aff6091df17a",
          "name": "Updates a pet in the store with form data",
          "request": {
            "name": "Updates a pet in the store with form data",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                ":petId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of pet that needs to be updated",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "petId"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Updated name of the pet",
                    "type": "text/plain"
                  },
                  "key": "name",
                  "value": "<string>"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Updated status of the pet",
                    "type": "text/plain"
                  },
                  "key": "status",
                  "value": "<string>"
                }
              ]
            },
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "6fc9feb8-b08e-4749-949e-bdb4a5da7bbc",
              "name": "Invalid input",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "Updated name of the pet",
                        "type": "text/plain"
                      },
                      "key": "name",
                      "value": "<string>"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "Updated status of the pet",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "637436c5-89fa-44f9-85d3-5807284b460c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7bf5e1c3-7d14-4003-b8ee-b5c8037cf43c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "db1735d5-a719-4645-9fcc-ea7780951371"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Updates a pet in the store with form data",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "pet",
              "<long>"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "59935d55-06d2-4236-b37f-b0add7a27579",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 37,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "disabled": false,
                "description": {
                  "content": "Updated name of the pet",
                  "type": "text/plain"
                },
                "key": "name",
                "value": "<string>"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Updated status of the pet",
                  "type": "text/plain"
                },
                "key": "status",
                "value": "<string>"
              }
            ]
          },
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "ed01db28-d3ee-47b3-becc-9a4ce226b08d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 22
        },
        "id": "899c4446-8335-4090-bad1-aff6091df17a",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292"
        },
        "item": {
          "id": "8a7f86cb-a5ad-4077-98e5-f414608c166a",
          "name": "Deletes a pet",
          "request": {
            "name": "Deletes a pet",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                ":petId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Pet id to delete",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "petId"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "key": "api_key",
                "value": "<string>"
              }
            ],
            "method": "DELETE",
            "body": {},
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "918a211f-a527-4b8a-92c5-e6f70e4908d4",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "cdac6a7c-6988-46aa-a9b1-3f4133825001",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2d2ef5db-9c7d-484e-8130-46d7e7237fd2",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "db81beb9-3a8a-4e49-988b-aeefe47aa0a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b98544b9-79f4-405b-8a77-b2fa2adea035",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Deletes a pet",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "pet",
              "<long>"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "key": "api_key",
              "value": "<string>"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "660f7960-d673-46ec-94ba-1bd8713d2ae5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {},
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "c1fca001-6789-4ac5-bd3a-f3ec307a9521",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 22
        },
        "id": "8a7f86cb-a5ad-4077-98e5-f414608c166a",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11"
        },
        "item": {
          "id": "c7c5069e-5bb3-4dc3-bea0-49c93ee85ab4",
          "name": "Add a new pet to the store",
          "request": {
            "name": "Add a new pet to the store",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "4a3fea59-f190-4c7b-aa73-a3177614f1e8",
              "name": "Invalid input",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e9cb8c96-13d9-4c3f-9fb4-03e785ab7ec3",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "64d9b49b-aebe-4810-afa5-15fa8bff2cb1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Add a new pet to the store",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "pet"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ef5c016a-3ee0-4ee8-a61a-df3bc743365a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 320,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "a989316e-e589-4fa1-b12b-0d09d7a6da31",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 22
        },
        "id": "c7c5069e-5bb3-4dc3-bea0-49c93ee85ab4",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da"
        },
        "item": {
          "id": "fdb01201-bc29-48d7-8df4-2e94e3e18e01",
          "name": "Update an existing pet",
          "request": {
            "name": "Update an existing pet",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "939e2853-f63a-4109-b6cb-a490601f4152",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "d6bc0258-8165-4412-afbe-2c4367ea5875",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "275f85cf-e0cf-41db-970d-f227b154b72c",
              "name": "Validation exception",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "138d95bf-c9e3-4d68-870e-59b8e234c118",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "e8c4f6ed-6231-424f-98b4-d65e67a1256d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "954ee9c0-a330-4863-b422-19d809684bec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Update an existing pet",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "pet"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8341341b-d2f1-4838-a7b9-da734e04a52e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 320,
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "ee949115-ea45-4b82-a1e7-88f78a5702b2",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 22
        },
        "id": "fdb01201-bc29-48d7-8df4-2e94e3e18e01",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351"
        },
        "item": {
          "id": "bb880381-fba0-4410-a8a1-1823459006b6",
          "name": "Finds Pets by status",
          "request": {
            "name": "Finds Pets by status",
            "description": {
              "content": "Multiple status values can be provided with comma separated strings",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Status values that need to be considered for filter",
                    "type": "text/plain"
                  },
                  "key": "status",
                  "value": "available"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Status values that need to be considered for filter",
                    "type": "text/plain"
                  },
                  "key": "status",
                  "value": "available"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {},
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "07a43a58-79ed-42ca-a19f-48e0eca9bc84",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Status values that need to be considered for filter",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "available"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"available\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"pending\"\n  }\n]",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "8d25871a-adb0-4dea-9e77-ec83183d416a",
              "name": "Invalid status value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Status values that need to be considered for filter",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "available"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "79a61b56-e0b5-469b-ae13-fcfb8f9227b7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "cd9b7722-1979-46e7-8f6a-8b224aaba9df"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Finds Pets by status",
          "description": {
            "content": "Multiple status values can be provided with comma separated strings",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "pet",
              "findByStatus"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "status",
                "value": "available"
              },
              {
                "key": "status",
                "value": "available"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e74d4c2a-07bf-4dd7-a2c2-dc8a8e6f5b7e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {},
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "7adb8438-49dd-4de7-bee4-bf34ce1e0cc7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 22
        },
        "id": "bb880381-fba0-4410-a8a1-1823459006b6",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7"
        },
        "item": {
          "id": "971b051b-5f11-4865-bfdb-930759321303",
          "name": "Finds Pets by tags",
          "request": {
            "name": "Finds Pets by tags",
            "description": {
              "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByTags"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Tags to filter by",
                    "type": "text/plain"
                  },
                  "key": "tags",
                  "value": "<string>"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Tags to filter by",
                    "type": "text/plain"
                  },
                  "key": "tags",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {},
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f84c6481-ec89-41f8-8d98-84278ed1040d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Tags to filter by",
                        "type": "text/plain"
                      },
                      "key": "tags",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"available\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"pending\"\n  }\n]",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "d9f6f5d5-2dba-4cee-9593-bdaef059c882",
              "name": "Invalid tag value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Tags to filter by",
                        "type": "text/plain"
                      },
                      "key": "tags",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "626c1e63-accd-4395-8461-55fd307afb73",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8d49148a-2b7b-471c-8610-3cd9e10c2270"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "182ac331-db6d-4177-895e-83b7a2b8af97"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Finds Pets by tags",
          "description": {
            "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "pet",
              "findByTags"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "tags",
                "value": "<string>"
              },
              {
                "key": "tags",
                "value": "<string>"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b8bb9132-1ff8-441c-b2f5-f3cd9a6a5b51",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {},
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "e0244518-150e-4c60-88b4-2f03d583a160",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 22
        },
        "id": "971b051b-5f11-4865-bfdb-930759321303",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73"
        },
        "item": {
          "id": "47bd9e7e-96b5-45b3-98e7-5b3fbcea36b5",
          "name": "Returns pet inventories by status",
          "request": {
            "name": "Returns pet inventories by status",
            "description": {
              "content": "Returns a map of status codes to quantities",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "inventory"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {},
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "any",
                  "value": "api_key",
                  "key": "key"
                },
                {
                  "type": "any",
                  "value": "{{apiKey}}",
                  "key": "value"
                },
                {
                  "type": "any",
                  "value": "header",
                  "key": "in"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f5ec3f83-08a2-487c-ba54-c6ae4b903bfc",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "inventory"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<API Key>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"ipsum3\": \"<integer>\",\n  \"ullamco_\": \"<integer>\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "30d15eb6-a714-4505-92ba-56cfa1444342",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "edb6076e-41da-4d5b-9301-a57265dc447e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a954e286-6433-4320-9cce-47188b28e9bf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Returns pet inventories by status",
          "description": {
            "content": "Returns a map of status codes to quantities",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "store",
              "inventory"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "api_key",
              "value": "{{apiKey}}",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dbf72605-9dd2-422f-809d-3cd4b5807b39",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {},
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "any",
                "value": "api_key",
                "key": "key"
              },
              {
                "type": "any",
                "value": "{{apiKey}}",
                "key": "value"
              },
              {
                "type": "any",
                "value": "header",
                "key": "in"
              }
            ]
          }
        },
        "response": {
          "id": "f75c9128-276e-49f2-a99e-86d2e729bef4",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 22
        },
        "id": "47bd9e7e-96b5-45b3-98e7-5b3fbcea36b5",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134"
        },
        "item": {
          "id": "37596f31-461f-4513-b68c-f115d589cced",
          "name": "Place an order for a pet",
          "request": {
            "name": "Place an order for a pet",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "order"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "1fda5538-cdef-4e2a-808b-b6356da3ddc8",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "3a05bb2f-1564-4c06-9b92-a53345f57fc0",
              "name": "Invalid Order",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "597ba00c-1f3c-4c77-a78a-6b073c252d22",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "03bae9d1-36cd-4da0-94c4-19d4b6bcdd07"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "431cc954-9096-497b-8fe7-9701b31cc10a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Place an order for a pet",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "store",
              "order"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7caa0964-c618-4356-8cd0-2757bddbf99e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 148,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "299e8da8-8a16-4327-bbd7-64d7802e8d6f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 22
        },
        "id": "37596f31-461f-4513-b68c-f115d589cced",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3"
        },
        "item": {
          "id": "264a1935-7360-4f26-8f41-142b6938ff4d",
          "name": "Find purchase order by ID",
          "request": {
            "name": "Find purchase order by ID",
            "description": {
              "content": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "order",
                ":orderId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of pet that needs to be fetched",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "orderId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "e0958818-608a-4a5f-b7e4-d2cb00de3349",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "6087fe77-aa5d-4ba7-acf4-36db74b6f01d",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "5d0577ba-f07e-45ab-bd5a-f25d43c11d20",
              "name": "Order not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "844aa396-447a-499c-b820-79bc78628d00",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "3bcaa223-3055-4a1b-ae73-aa482d46aae1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Find purchase order by ID",
          "description": {
            "content": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "store",
              "order",
              "<long>"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75fc379e-296a-4b4d-afe0-7af3a6c6ab90",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {}
        },
        "response": {
          "id": "35bfa10b-e205-43ca-801c-76481cd54e10",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "264a1935-7360-4f26-8f41-142b6938ff4d",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631"
        },
        "item": {
          "id": "d51afefc-5362-4d9e-bef5-a3675f73ad79",
          "name": "Delete purchase order by ID",
          "request": {
            "name": "Delete purchase order by ID",
            "description": {
              "content": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "order",
                ":orderId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of the order that needs to be deleted",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "orderId"
                }
              ]
            },
            "method": "DELETE",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "c4ec16b9-be0e-427d-8ab2-4df44772fcff",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "b31394d8-54c7-4bf7-bb56-5f98760ab07c",
              "name": "Order not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3e70563c-4ef0-43c9-8bc3-90eb970bed1c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7147413b-2f0d-4768-9605-15c2ebe2d12d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "e998ab60-fa45-4620-a23f-567f86e84220"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Delete purchase order by ID",
          "description": {
            "content": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "store",
              "order",
              "<long>"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "01723aba-26f7-448c-ace4-9f7f68266643",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {}
        },
        "response": {
          "id": "7b6af5ed-ce1d-4265-b4b1-35bbe9c2f39f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "d51afefc-5362-4d9e-bef5-a3675f73ad79",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111"
        },
        "item": {
          "id": "77892cc2-9750-44df-96b2-55f6ef8fcccc",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithList"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "96583af5-88e8-4674-bbe0-ef4d4dbe82b6",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithList"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1a5b5a5c-366a-4a65-9e21-4b5e6743d7e6",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8feb840b-393c-49e3-b73b-5b49760233f9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Creates list of users with given input array",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "user",
              "createWithList"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "767ddcce-3e19-4474-a83b-150d1b978a79",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 446,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c5ae1825-a2bc-4f0a-9295-acd7de2e9018",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 22
        },
        "id": "77892cc2-9750-44df-96b2-55f6ef8fcccc",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf"
        },
        "item": {
          "id": "d02c9e39-286d-45d0-b76b-b85db66858c0",
          "name": "Get user by user name",
          "request": {
            "name": "Get user by user name",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "username"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3f1fd4a0-6c42-48a4-9bfe-030a84598f50",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "e28050c5-f6b7-48cd-9b55-82bb16e22255",
              "name": "Invalid username supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "3a1efbd2-acaa-4cec-b600-d48c1cf32bdf",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e99a8a95-ec37-474f-95ac-71903049ac5c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6131ea28-36a7-4291-9a5a-a17218346636"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Get user by user name",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "user",
              "<string>"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1dcb4ec-8f03-4b47-a845-e7bb6c7f7abc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {}
        },
        "response": {
          "id": "b8b5e0c6-bf59-4cd7-b6f8-40eb6369a88e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 22
        },
        "id": "d02c9e39-286d-45d0-b76b-b85db66858c0",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9"
        },
        "item": {
          "id": "3c9df624-e6df-4ccd-8e74-b930a7b33b01",
          "name": "Updated user",
          "request": {
            "name": "Updated user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) name that need to be updated",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "username"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "37bed2b2-f927-478f-b406-dc87dd2eacaa",
              "name": "Invalid user supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "e7ba4324-ff36-43d8-81c4-8c3f61dcce79",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f512b35-aa99-4ba3-a2bb-c1a2b048f02c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "959f2457-38eb-4d55-80bd-74d3024cf1cb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Updated user",
          "description": {
            "content": "This can only be done by the logged in user.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "user",
              "<string>"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "27a5e573-2bc8-47b2-b047-bdaf43713df4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 200,
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f06417a3-81f5-4b66-a499-a85718e54a3a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 22
        },
        "id": "3c9df624-e6df-4ccd-8e74-b930a7b33b01",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac"
        },
        "item": {
          "id": "cd1ce29e-6f1b-4906-8347-d598f4100c9e",
          "name": "Delete user",
          "request": {
            "name": "Delete user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The name that needs to be deleted",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "username"
                }
              ]
            },
            "method": "DELETE",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "a4bcfcb3-56ac-4401-98de-d63d97b53471",
              "name": "Invalid username supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "4b57f14e-5f45-4de3-bbf4-b62ed9636228",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4ed75b36-7608-47af-9f88-d5a33fda1ff4",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "79b209a8-a18b-4e40-a570-1be0eefd5596"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7ea06791-2acd-44dc-8070-df9bd9172674",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f149f3ec-f882-4049-9821-8892a5716469"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Delete user",
          "description": {
            "content": "This can only be done by the logged in user.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "user",
              "<string>"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "38a3cdf8-6aeb-4211-9d03-84ff9a2df457",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {}
        },
        "response": {
          "id": "b077ac09-f0de-4491-b1a3-91f5f1af4e43",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "cd1ce29e-6f1b-4906-8347-d598f4100c9e",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1"
        },
        "item": {
          "id": "8259602a-5e89-413d-8feb-3bd0bdfd71fb",
          "name": "Logs user into the system",
          "request": {
            "name": "Logs user into the system",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The user name for login",
                    "type": "text/plain"
                  },
                  "key": "username",
                  "value": "<string>"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The password for login in clear text",
                    "type": "text/plain"
                  },
                  "key": "password",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "d39f8901-3460-4df8-8855-2e08ba82b503",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The user name for login",
                        "type": "text/plain"
                      },
                      "key": "username",
                      "value": "<string>"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The password for login in clear text",
                        "type": "text/plain"
                      },
                      "key": "password",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "date in UTC when token expires",
                    "type": "text/plain"
                  },
                  "key": "X-Expires-After",
                  "value": "<dateTime>"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "calls per hour allowed by the user",
                    "type": "text/plain"
                  },
                  "key": "X-Rate-Limit",
                  "value": "<integer>"
                }
              ],
              "body": "<string>",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "49b29697-29a6-4b8e-a3ee-ccec4b6bb4b5",
              "name": "Invalid username/password supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The user name for login",
                        "type": "text/plain"
                      },
                      "key": "username",
                      "value": "<string>"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The password for login in clear text",
                        "type": "text/plain"
                      },
                      "key": "password",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f8e840c6-4c51-4bf4-b383-40c60d68d282",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4284f671-4772-4bfe-afbc-247f87a19536"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d4be186c-e308-4c72-87b1-10db6dcafebe",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "2dff5c8a-4368-4a6a-8beb-67809827f321"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Logs user into the system",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "user",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "username",
                "value": "<string>"
              },
              {
                "key": "password",
                "value": "<string>"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "431bbf16-1d4f-4414-83b4-e5794a405b06",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {}
        },
        "response": {
          "id": "a2acb4a2-2e8a-426a-a618-bcd3dfef7dd9",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 22
        },
        "id": "8259602a-5e89-413d-8feb-3bd0bdfd71fb",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac"
        },
        "item": {
          "id": "6ff95b33-968c-4e2f-901e-d8f2f052d40a",
          "name": "Logs out current logged in user session",
          "request": {
            "name": "Logs out current logged in user session",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "d5ea79e7-9937-4a65-aed6-bf566244ff89",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4a99954-4915-4281-99f7-a5ac9dab46e8",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "14856e00-ff92-48b1-bedd-421460408736"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f9270af0-9f55-428f-998a-153ca2626690"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Logs out current logged in user session",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "user",
              "logout"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "36ef7620-7368-4d7a-8432-5b9ed4100d30",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {}
        },
        "response": {
          "id": "49937444-fab2-45ff-9a70-c0d0353ae616",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 22
        },
        "id": "6ff95b33-968c-4e2f-901e-d8f2f052d40a",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4"
        },
        "item": {
          "id": "5546190c-f332-4839-82c5-089ec3db3ab8",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithArray"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "1ba74aab-5a7d-4dc1-8b3b-35a113d2095f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithArray"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "17ebbbd1-47a4-45ae-9fb8-496480a02841",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "1bdceffd-c794-417a-86a3-9e28824db37b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Creates list of users with given input array",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "user",
              "createWithArray"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4486bcab-ca67-4844-b9e2-653176b0210f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 446,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "cabb4d5d-21fe-472f-860e-b0e596080316",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 22
        },
        "id": "5546190c-f332-4839-82c5-089ec3db3ab8",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622"
        },
        "item": {
          "id": "6955d0b7-749c-41c3-afdc-5d71d5ae4b47",
          "name": "Create user",
          "request": {
            "name": "Create user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "302f8220-5c0c-431b-85e5-36d8a62c0c72",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0b134647-3bee-462d-b483-1f9a12645535",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "71f4a423-265f-4647-834f-71e202341f40"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Create user",
          "description": {
            "content": "This can only be done by the logged in user.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "45610",
            "path": [
              "user"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ada31d7-5d8a-4aa2-bc94-b53bdb16b5e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:45610",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 200,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3894cce0-822c-4163-8ead-ee76b1fbebac",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Sun, 30 Jun 2024 00:16:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "22"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 22
        },
        "id": "6955d0b7-749c-41c3-afdc-5d71d5ae4b47",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 440
    },
    "failures": [],
    "error": null
  },
  "consoleLogs": {
    "a73969b8-06de-49fb-94aa-97e457b74154": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/pet/<long>/uploadImage"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"multipart/form-data\",\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"cd3fbff3-ffbd-405b-8873-1aa491a5ee34\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 292\n}"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          48,
          "ms"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          48,
          "ms"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a73969b8-06de-49fb-94aa-97e457b74154",
          "httpRequestId": "12c4f373-7b12-427f-add8-c02cb1512d7d",
          "scriptId": "a938b614-9aa5-4537-b280-146cf59dc864",
          "execution": "92f8aaa1-10f9-4414-8e55-af6816d68c12"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "25907133-531f-418e-b3ed-016ed3564237": [
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/pet/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"api_key\": \"{{apiKey}}\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"395f6d27-65d4-4e2e-a4dd-9fa97eeff3ee\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          10,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          10,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "25907133-531f-418e-b3ed-016ed3564237",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "27677a8c-b88b-4d04-a41a-761ae2230622",
          "scriptId": "eee5da3f-72a6-4286-be9e-e00f037f418e",
          "execution": "a06a21b5-4b28-480c-81b8-b97c50daaa83"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "1094a335-2788-42ce-a0a6-710befd0ea04": [
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/pet/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/x-www-form-urlencoded\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"59935d55-06d2-4236-b37f-b0add7a27579\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 37\n}"
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          "name=<string>&status=<string>"
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          8,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          8,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "1094a335-2788-42ce-a0a6-710befd0ea04",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "15bb5b84-7d99-4193-a01d-847585a1b55c",
          "scriptId": "5204f4b4-a6ab-43f3-a46d-614cf2c707ae",
          "execution": "db1735d5-a719-4645-9fcc-ea7780951371"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "3ddb2414-080a-4637-9655-6a3bc7f4c790": [
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "DELETE"
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/pet/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"api_key\": \"<string>\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"660f7960-d673-46ec-94ba-1bd8713d2ae5\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          11,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          11,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "3ddb2414-080a-4637-9655-6a3bc7f4c790",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0046947-87d3-4435-be19-4f2346a58292",
          "scriptId": "b98544b9-79f4-405b-8a77-b2fa2adea035",
          "execution": "34f87b3b-617c-4f84-a527-65af4c7b5ef7"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "72fd40a5-6aea-4c76-9c3f-239314c5fa05": [
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/pet"
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"ef5c016a-3ee0-4ee8-a61a-df3bc743365a\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 320\n}"
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          7,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          7,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "72fd40a5-6aea-4c76-9c3f-239314c5fa05",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "997e831d-8444-4aee-a50b-430200480a11",
          "scriptId": "a54cf257-d989-4ddc-b2fe-a4894ac34baa",
          "execution": "76045c4d-9160-4386-a2a3-0e2df27a6e17"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "ec247ec6-c8ee-42a9-bc43-efafb59da750": [
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "PUT"
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/pet"
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"8341341b-d2f1-4838-a7b9-da734e04a52e\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 320\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          8,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          8,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "ec247ec6-c8ee-42a9-bc43-efafb59da750",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a4d13af7-4a49-4c0e-8d41-8a4c5594f1da",
          "scriptId": "954ee9c0-a330-4863-b422-19d809684bec",
          "execution": "c4b0297b-cc14-4f9d-b8ff-b405eff4f054"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "ba16f6f5-8274-4a1b-a314-14ea8f586fb7": [
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/pet/findByStatus?status=available&status=available"
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"e74d4c2a-07bf-4dd7-a2c2-dc8a8e6f5b7e\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          9,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          9,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "ba16f6f5-8274-4a1b-a314-14ea8f586fb7",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "56243dd3-c65e-4960-a99b-c62aecb69351",
          "scriptId": "17dc5d52-b872-4e96-b2fb-1b520ef02e22",
          "execution": "9a918df7-258e-4a1a-bba3-d7fd62f98d90"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "ad9f0957-d0f7-4f70-934f-7001400f305e": [
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/pet/findByTags?tags=<string>&tags=<string>"
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"b8bb9132-1ff8-441c-b2f5-f3cd9a6a5b51\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          9,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          9,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "ad9f0957-d0f7-4f70-934f-7001400f305e",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98a3a85d-087f-4f86-ad21-551bcb0ff5b7",
          "scriptId": "7da6bcd2-6984-4775-b95b-2e7e0a95a681",
          "execution": "182ac331-db6d-4177-895e-83b7a2b8af97"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "6f6e4beb-bd42-45a7-9beb-157a6662a5eb": [
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/store/inventory"
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"api_key\": \"{{apiKey}}\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"dbf72605-9dd2-422f-809d-3cd4b5807b39\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:12 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          17,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          17,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "6f6e4beb-bd42-45a7-9beb-157a6662a5eb",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c546b9b3-d59d-47a9-81dd-592578252c73",
          "scriptId": "a954e286-6433-4320-9cce-47188b28e9bf",
          "execution": "30788401-4376-4fca-85f0-33e5bf7c9a1b"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "ca00aa2f-95b1-41f9-a159-56f09cd363e8": [
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/store/order"
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"7caa0964-c618-4356-8cd0-2757bddbf99e\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 148\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"delivered\",\n  \"complete\": \"<boolean>\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          7,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          7,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "ca00aa2f-95b1-41f9-a159-56f09cd363e8",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c501a66f-3cde-4385-bb78-5a472ab1e134",
          "scriptId": "431cc954-9096-497b-8fe7-9701b31cc10a",
          "execution": "af5649de-ff19-4e4c-8bcb-facdb51241a7"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "7007c9ec-7701-4cba-a73b-3f9077accad9": [
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/store/order/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"75fc379e-296a-4b4d-afe0-7af3a6c6ab90\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          6,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          6,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "7007c9ec-7701-4cba-a73b-3f9077accad9",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b7135e9f-98c7-49f6-b7dd-e8ada47c98b3",
          "scriptId": "8d2f4d90-62ea-4e1a-8914-758b5b1df1b4",
          "execution": "84bf9940-bb9f-4816-a156-c6a04f42c97b"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "8f1ac72c-6447-46d5-b920-fcd11b0d8729": [
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "DELETE"
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/store/order/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"01723aba-26f7-448c-ace4-9f7f68266643\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          6,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          6,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "8f1ac72c-6447-46d5-b920-fcd11b0d8729",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5bff1276-8159-44a4-9e28-58f7e05a2631",
          "scriptId": "f77bd97e-1afe-4654-9e8c-a8261d0acefa",
          "execution": "e998ab60-fa45-4620-a23f-567f86e84220"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "c48e5a65-f636-4227-a388-5daa3d870f25": [
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/user/createWithList"
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"767ddcce-3e19-4474-a83b-150d1b978a79\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 446\n}"
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]"
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          8,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          8,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "c48e5a65-f636-4227-a388-5daa3d870f25",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "75f3b9b9-d009-4f17-ad15-6eb89cf49111",
          "scriptId": "1058bca4-b914-429f-a88d-6ebfbbfcbbc9",
          "execution": "6c7a13d7-b5ac-464f-b964-9ccd3c81981b"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "b815d4e5-cbe8-40fc-90ff-b9998921cc90": [
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/user/<string>"
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"f1dcb4ec-8f03-4b47-a845-e7bb6c7f7abc\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          9,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          9,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "b815d4e5-cbe8-40fc-90ff-b9998921cc90",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "69fc8d95-5116-4fee-98d4-b09a799d0dbf",
          "scriptId": "3f55d72a-8aa9-408b-8062-d8a3441dfde4",
          "execution": "3ccdff4d-e0ad-45c9-91be-b6355ae9ad03"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "85bea82d-f15a-43bd-9715-9482bbaefcbb": [
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "PUT"
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/user/<string>"
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"27a5e573-2bc8-47b2-b047-bdaf43713df4\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 200\n}"
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          9,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          9,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "85bea82d-f15a-43bd-9715-9482bbaefcbb",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6609daaf-d1ac-40e1-bf1a-e18bd8dcf2e9",
          "scriptId": "aa1b13ea-e95f-4b14-b48e-ce3af8461d4d",
          "execution": "147a08c3-56d8-4a18-ac1f-dfab11981f4d"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0": [
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "DELETE"
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/user/<string>"
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"38a3cdf8-6aeb-4211-9d03-84ff9a2df457\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          4,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          4,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "e61c646c-e6e5-4ff5-ba44-2a8f13e6acf0",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2a02294b-32cc-4a35-b887-4af5eae5e2ac",
          "scriptId": "7ea06791-2acd-44dc-8070-df9bd9172674",
          "execution": "f149f3ec-f882-4049-9821-8892a5716469"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "74ddbe0f-5334-4e05-9949-168c47de92d1": [
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/user/login?username=<string>&password=<string>"
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"431bbf16-1d4f-4414-83b4-e5794a405b06\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          6,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          6,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "74ddbe0f-5334-4e05-9949-168c47de92d1",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "46d427ad-76e1-4fc7-aaf3-ad617cf85da1",
          "scriptId": "d4be186c-e308-4c72-87b1-10db6dcafebe",
          "execution": "2dff5c8a-4368-4a6a-8beb-67809827f321"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "d6429559-b475-42e0-af84-2b6b94292e2e": [
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/user/logout"
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"36ef7620-7368-4d7a-8432-5b9ed4100d30\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          4,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          4,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "d6429559-b475-42e0-af84-2b6b94292e2e",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc26938-1e10-4a56-ad14-093d223dbaac",
          "scriptId": "d2575a5d-2f51-40dc-9ab6-2cdb14c752ca",
          "execution": "f9270af0-9f55-428f-998a-153ca2626690"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "5dbdde17-3b92-4ab5-81cc-55e164d903d6": [
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/user/createWithArray"
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"4486bcab-ca67-4844-b9e2-653176b0210f\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 446\n}"
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]"
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          5,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          5,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "5dbdde17-3b92-4ab5-81cc-55e164d903d6",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fbcb0ba6-5434-46f1-b202-ca217175cce4",
          "scriptId": "4ab17e60-ad40-4d22-8dba-da56cc87951b",
          "execution": "a2cb6e94-d2a6-4a18-b621-a1bc4cbc903f"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ],
    "e5bc3936-e5c5-43bc-9aab-da36c5646c0a": [
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "http://localhost:45610/user"
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"2ada31d7-5d8a-4aa2-bc94-b53bdb16b5e4\",\n  \"host\": \"localhost:45610\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 200\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 00:16:13 GMT\",\n  \"server\": \"uvicorn\",\n  \"content-length\": \"22\",\n  \"content-type\": \"application/json\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          5,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Corpo da Resposta:",
          "{\n  \"detail\": \"Not Found\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          5,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "e5bc3936-e5c5-43bc-9aab-da36c5646c0a",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "994450aa-47ee-407e-b92a-ef9376303622",
          "scriptId": "7723645f-9b04-42a9-b363-be66f8d6d2f2",
          "execution": "7087290f-3f48-49c0-8d78-a86f5ce3b99b"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "application/json"
        ]
      }
    ]
  }
}