{
  "collection": {
    "_": {
      "postman_id": "e410ba95-9a8d-403e-bd0c-217f6a9769ba"
    },
    "item": [
      {
        "id": "66836b92-78c4-4dd8-8512-50dac23170c2",
        "name": "pet",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "cfa955ee-351e-4fdc-8044-7c9468da8be7",
            "name": "{petId}",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "b6438a05-a3e8-4c35-806d-1d9db3d7fed0",
                "name": "uploadImage",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "712a41de-87c6-43bb-8aa9-02c206662cbe",
                    "name": "uploads an image",
                    "request": {
                      "name": "uploads an image",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "url": {
                        "path": [
                          "pet",
                          ":petId",
                          "uploadImage"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) ID of pet to update",
                              "type": "text/plain"
                            },
                            "type": "any",
                            "value": "<long>",
                            "key": "petId"
                          }
                        ]
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "multipart/form-data"
                        },
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "formdata",
                        "formdata": [
                          {
                            "description": {
                              "content": "Additional data to pass to server",
                              "type": "text/plain"
                            },
                            "key": "additionalMetadata",
                            "value": "<string>",
                            "type": "text"
                          },
                          {
                            "description": {
                              "content": "file to upload",
                              "type": "text/plain"
                            },
                            "key": "file",
                            "value": "<string>",
                            "type": "text"
                          }
                        ]
                      },
                      "auth": {
                        "type": "oauth2",
                        "oauth2": [
                          {
                            "type": "any",
                            "value": "read:pets write:pets",
                            "key": "scope"
                          },
                          {
                            "type": "any",
                            "value": "https://petstore.swagger.io/oauth/authorize",
                            "key": "authUrl"
                          },
                          {
                            "type": "any",
                            "value": "implicit",
                            "key": "grant_type"
                          }
                        ]
                      }
                    },
                    "response": [
                      {
                        "_": {
                          "postman_previewlanguage": "json"
                        },
                        "id": "70b44639-ce67-4861-996a-85266bd1c040",
                        "name": "successful operation",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "pet",
                              ":petId",
                              "uploadImage"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "multipart/form-data"
                            },
                            {
                              "key": "Accept",
                              "value": "application/json"
                            },
                            {
                              "description": {
                                "content": "Added as a part of security scheme: oauth2",
                                "type": "text/plain"
                              },
                              "key": "Authorization",
                              "value": "<token>"
                            }
                          ],
                          "method": "POST",
                          "body": {
                            "mode": "formdata",
                            "formdata": [
                              {
                                "description": {
                                  "content": "Additional data to pass to server",
                                  "type": "text/plain"
                                },
                                "key": "additionalMetadata",
                                "value": "<string>",
                                "type": "text"
                              },
                              {
                                "description": {
                                  "content": "file to upload",
                                  "type": "text/plain"
                                },
                                "key": "file",
                                "value": "<string>",
                                "type": "text"
                              }
                            ]
                          }
                        },
                        "status": "OK",
                        "code": 200,
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": "{\n  \"code\": \"<integer>\",\n  \"type\": \"<string>\",\n  \"message\": \"<string>\"\n}",
                        "cookie": []
                      }
                    ],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5449adb0-025b-409f-9d4e-006f310a291d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c803458-cc98-4cbf-8530-3567ee5f13ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a370a4e0-2842-49a4-bd2e-238536e2781d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(`Response status code is ${pm.response.code}`, function () {",
                            "    try {",
                            "        // Logando dados da requisição",
                            "        console.log('Request Method:', pm.request.method);",
                            "        console.log('Request URL:', pm.request.url.toString());",
                            "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                            "",
                            "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                            "            console.log('Request Body (raw):', pm.request.body.raw);",
                            "        } else if (pm.request.body) {",
                            "            console.log('Request Body:', pm.request.body.toString());",
                            "        } else {",
                            "            console.log('Request Body: none');",
                            "        }",
                            "",
                            "        // Verificando e logando o código de status da resposta",
                            "        const responseCode = pm.response.code;",
                            "        console.log('Response Code:', responseCode);",
                            "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                            "",
                            "        // Logando cabeçalhos da resposta",
                            "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                            "",
                            "        // Logando tempo de resposta",
                            "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                            "",
                            "        // Tentando analisar o corpo da resposta como JSON",
                            "        try {",
                            "            const jsonData = pm.response.json();",
                            "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                            "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                            "        } catch (e) {",
                            "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                            "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                            "        }",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao executar o teste:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response time is acceptable`, function () {",
                            "    try {",
                            "        const responseTime = pm.response.responseTime;",
                            "        console.log('Response Time:', responseTime, 'ms');",
                            "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response has JSON content-type`, function () {",
                            "    try {",
                            "        const contentType = pm.response.headers.get('Content-Type');",
                            "        console.log('Content-Type:', contentType);",
                            "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71acb34a-0d30-4798-86f2-39c45166014f"
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              },
              {
                "id": "c9cc5a5e-d9ef-487d-86b3-201bad13b859",
                "name": "Find pet by ID",
                "request": {
                  "name": "Find pet by ID",
                  "description": {
                    "content": "Returns a single pet",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      ":petId"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) ID of pet to return",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<long>",
                        "key": "petId"
                      }
                    ]
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {},
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "any",
                        "value": "api_key",
                        "key": "key"
                      },
                      {
                        "type": "any",
                        "value": "{{apiKey}}",
                        "key": "value"
                      },
                      {
                        "type": "any",
                        "value": "header",
                        "key": "in"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "8b5b52b3-90cb-4682-9b55-bb7d0123a1b0",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: apikey",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<API Key>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "4f2dd842-a201-4b86-9ff7-812b334d899e",
                    "name": "Invalid ID supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "description": {
                            "content": "Added as a part of security scheme: apikey",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<API Key>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "57a404c7-1673-4cb4-ad7e-4530f6fcd890",
                    "name": "Pet not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "description": {
                            "content": "Added as a part of security scheme: apikey",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<API Key>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ed15131-6731-49d2-9834-e9b3558e49e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf1febfd-9bf9-4e7a-ba87-914d8363cb53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2af990f-3848-457c-9293-bc2c8030a169",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "f3bb0214-8815-493c-a9b7-520785244b91",
                "name": "Updates a pet in the store with form data",
                "request": {
                  "name": "Updates a pet in the store with form data",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      ":petId"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) ID of pet that needs to be updated",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<long>",
                        "key": "petId"
                      }
                    ]
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/x-www-form-urlencoded"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "Updated name of the pet",
                          "type": "text/plain"
                        },
                        "key": "name",
                        "value": "<string>"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "Updated status of the pet",
                          "type": "text/plain"
                        },
                        "key": "status",
                        "value": "<string>"
                      }
                    ]
                  },
                  "auth": {
                    "type": "oauth2",
                    "oauth2": [
                      {
                        "type": "any",
                        "value": "read:pets write:pets",
                        "key": "scope"
                      },
                      {
                        "type": "any",
                        "value": "https://petstore.swagger.io/oauth/authorize",
                        "key": "authUrl"
                      },
                      {
                        "type": "any",
                        "value": "implicit",
                        "key": "grant_type"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "c53131af-2789-4ef0-8e6c-2de1b0fec768",
                    "name": "Invalid input",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/x-www-form-urlencoded"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "urlencoded",
                        "urlencoded": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "Updated name of the pet",
                              "type": "text/plain"
                            },
                            "key": "name",
                            "value": "<string>"
                          },
                          {
                            "disabled": false,
                            "description": {
                              "content": "Updated status of the pet",
                              "type": "text/plain"
                            },
                            "key": "status",
                            "value": "<string>"
                          }
                        ]
                      }
                    },
                    "status": "Method Not Allowed",
                    "code": 405,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea94b06f-a6f3-4789-8e81-3a2fcd8a0451",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6947baa8-7a82-48cb-8cc1-f48b11a91123"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "356232ae-bea5-44db-8a68-821224758e9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "e9a684ae-3e0c-4e18-811e-fd090001c04c",
                "name": "Deletes a pet",
                "request": {
                  "name": "Deletes a pet",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      ":petId"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Pet id to delete",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<long>",
                        "key": "petId"
                      }
                    ]
                  },
                  "header": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "api_key",
                      "value": "<string>"
                    }
                  ],
                  "method": "DELETE",
                  "body": {},
                  "auth": {
                    "type": "oauth2",
                    "oauth2": [
                      {
                        "type": "any",
                        "value": "read:pets write:pets",
                        "key": "scope"
                      },
                      {
                        "type": "any",
                        "value": "https://petstore.swagger.io/oauth/authorize",
                        "key": "authUrl"
                      },
                      {
                        "type": "any",
                        "value": "implicit",
                        "key": "grant_type"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "a9ba75bb-75d6-48fd-8e24-5b59599052b1",
                    "name": "Invalid ID supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "disabled": false,
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<string>"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "DELETE",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "4b5451ca-59fa-4672-82a4-23a462899352",
                    "name": "Pet not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          ":petId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "disabled": false,
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<string>"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "DELETE",
                      "body": {}
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b5168e7-55ea-4c79-893a-0e0afe6babd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6f830ac-d427-4377-8a57-8687611f023f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "9ff0051f-2159-47ee-9506-d417138faf42",
            "name": "Add a new pet to the store",
            "request": {
              "name": "Add a new pet to the store",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                "options": {
                  "raw": {
                    "headerFamily": "json",
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "oauth2",
                "oauth2": [
                  {
                    "type": "any",
                    "value": "read:pets write:pets",
                    "key": "scope"
                  },
                  {
                    "type": "any",
                    "value": "https://petstore.swagger.io/oauth/authorize",
                    "key": "authUrl"
                  },
                  {
                    "type": "any",
                    "value": "implicit",
                    "key": "grant_type"
                  }
                ]
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "47db1566-2cb2-4c7d-8ee8-2a24e9bf8b31",
                "name": "Invalid input",
                "originalRequest": {
                  "url": {
                    "path": [
                      "pet"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": {
                        "content": "Added as a part of security scheme: oauth2",
                        "type": "text/plain"
                      },
                      "key": "Authorization",
                      "value": "<token>"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Method Not Allowed",
                "code": 405,
                "header": [],
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b5ecdcab-42a6-4f1c-b9f4-3d5d70e875c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "256d42ae-adb6-44b6-851a-e87d27893ca4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7793b9c3-7acc-4633-8f83-857b96aa8530",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(`Response status code is ${pm.response.code}`, function () {",
                    "    try {",
                    "        // Logando dados da requisição",
                    "        console.log('Request Method:', pm.request.method);",
                    "        console.log('Request URL:', pm.request.url.toString());",
                    "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                    "",
                    "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                    "            console.log('Request Body (raw):', pm.request.body.raw);",
                    "        } else if (pm.request.body) {",
                    "            console.log('Request Body:', pm.request.body.toString());",
                    "        } else {",
                    "            console.log('Request Body: none');",
                    "        }",
                    "",
                    "        // Verificando e logando o código de status da resposta",
                    "        const responseCode = pm.response.code;",
                    "        console.log('Response Code:', responseCode);",
                    "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                    "",
                    "        // Logando cabeçalhos da resposta",
                    "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                    "",
                    "        // Logando tempo de resposta",
                    "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                    "",
                    "        // Tentando analisar o corpo da resposta como JSON",
                    "        try {",
                    "            const jsonData = pm.response.json();",
                    "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                    "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                    "        } catch (e) {",
                    "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                    "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                    "        }",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao executar o teste:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response time is acceptable`, function () {",
                    "    try {",
                    "        const responseTime = pm.response.responseTime;",
                    "        console.log('Response Time:', responseTime, 'ms');",
                    "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response has JSON content-type`, function () {",
                    "    try {",
                    "        const contentType = pm.response.headers.get('Content-Type');",
                    "        console.log('Content-Type:', contentType);",
                    "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "7a02ef29-29ae-4f40-8eae-91d1b6789ac2",
            "name": "Update an existing pet",
            "request": {
              "name": "Update an existing pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                "options": {
                  "raw": {
                    "headerFamily": "json",
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "oauth2",
                "oauth2": [
                  {
                    "type": "any",
                    "value": "read:pets write:pets",
                    "key": "scope"
                  },
                  {
                    "type": "any",
                    "value": "https://petstore.swagger.io/oauth/authorize",
                    "key": "authUrl"
                  },
                  {
                    "type": "any",
                    "value": "implicit",
                    "key": "grant_type"
                  }
                ]
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "92f9094f-7988-4603-b79f-7e203486fa8b",
                "name": "Invalid ID supplied",
                "originalRequest": {
                  "url": {
                    "path": [
                      "pet"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": {
                        "content": "Added as a part of security scheme: oauth2",
                        "type": "text/plain"
                      },
                      "key": "Authorization",
                      "value": "<token>"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Bad Request",
                "code": 400,
                "header": [],
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "87a7178c-c0a1-4ede-9a42-031095890f91",
                "name": "Pet not found",
                "originalRequest": {
                  "url": {
                    "path": [
                      "pet"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": {
                        "content": "Added as a part of security scheme: oauth2",
                        "type": "text/plain"
                      },
                      "key": "Authorization",
                      "value": "<token>"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Not Found",
                "code": 404,
                "header": [],
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "635863d8-2790-4518-95c3-e2359fb69189",
                "name": "Validation exception",
                "originalRequest": {
                  "url": {
                    "path": [
                      "pet"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "description": {
                        "content": "Added as a part of security scheme: oauth2",
                        "type": "text/plain"
                      },
                      "key": "Authorization",
                      "value": "<token>"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Method Not Allowed",
                "code": 405,
                "header": [],
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "44bbcb12-bc99-4a6e-902f-d72aa1e5a2ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "439eeef5-2d8b-4d0e-b533-6ccb5c6f2236"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "08737a42-9e90-4183-bbdc-c4e7848da774",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(`Response status code is ${pm.response.code}`, function () {",
                    "    try {",
                    "        // Logando dados da requisição",
                    "        console.log('Request Method:', pm.request.method);",
                    "        console.log('Request URL:', pm.request.url.toString());",
                    "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                    "",
                    "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                    "            console.log('Request Body (raw):', pm.request.body.raw);",
                    "        } else if (pm.request.body) {",
                    "            console.log('Request Body:', pm.request.body.toString());",
                    "        } else {",
                    "            console.log('Request Body: none');",
                    "        }",
                    "",
                    "        // Verificando e logando o código de status da resposta",
                    "        const responseCode = pm.response.code;",
                    "        console.log('Response Code:', responseCode);",
                    "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                    "",
                    "        // Logando cabeçalhos da resposta",
                    "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                    "",
                    "        // Logando tempo de resposta",
                    "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                    "",
                    "        // Tentando analisar o corpo da resposta como JSON",
                    "        try {",
                    "            const jsonData = pm.response.json();",
                    "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                    "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                    "        } catch (e) {",
                    "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                    "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                    "        }",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao executar o teste:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response time is acceptable`, function () {",
                    "    try {",
                    "        const responseTime = pm.response.responseTime;",
                    "        console.log('Response Time:', responseTime, 'ms');",
                    "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response has JSON content-type`, function () {",
                    "    try {",
                    "        const contentType = pm.response.headers.get('Content-Type');",
                    "        console.log('Content-Type:', contentType);",
                    "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "9293b795-b081-4164-8203-d06fb6339072"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "34af807c-7245-4923-9554-b99cb26c7667",
            "name": "findByStatus",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "65923227-72a6-4091-8abe-903df6047daa",
                "name": "Finds Pets by status",
                "request": {
                  "name": "Finds Pets by status",
                  "description": {
                    "content": "Multiple status values can be provided with comma separated strings",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      "findByStatus"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Status values that need to be considered for filter",
                          "type": "text/plain"
                        },
                        "key": "status",
                        "value": "available"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Status values that need to be considered for filter",
                          "type": "text/plain"
                        },
                        "key": "status",
                        "value": "available"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {},
                  "auth": {
                    "type": "oauth2",
                    "oauth2": [
                      {
                        "type": "any",
                        "value": "read:pets write:pets",
                        "key": "scope"
                      },
                      {
                        "type": "any",
                        "value": "https://petstore.swagger.io/oauth/authorize",
                        "key": "authUrl"
                      },
                      {
                        "type": "any",
                        "value": "implicit",
                        "key": "grant_type"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "39ad6230-27ff-4ce7-85e3-ce0447a63b6c",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          "findByStatus"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) Status values that need to be considered for filter",
                              "type": "text/plain"
                            },
                            "key": "status",
                            "value": "available"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"available\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"sold\"\n  }\n]",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "5202a2da-516c-4671-b5f1-a63623dcbcba",
                    "name": "Invalid status value",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          "findByStatus"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) Status values that need to be considered for filter",
                              "type": "text/plain"
                            },
                            "key": "status",
                            "value": "available"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e897684-83f5-41ae-9f8a-270fad92b76f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "563fe503-4821-4a6a-ab1a-06748c63d987"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "362df7ac-53f2-4a0c-95e7-bf1d23fd995b",
            "name": "findByTags",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "81a6d87b-7929-4b8d-9bf4-0073c385754f",
                "name": "Finds Pets by tags",
                "request": {
                  "name": "Finds Pets by tags",
                  "description": {
                    "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "pet",
                      "findByTags"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Tags to filter by",
                          "type": "text/plain"
                        },
                        "key": "tags",
                        "value": "<string>"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) Tags to filter by",
                          "type": "text/plain"
                        },
                        "key": "tags",
                        "value": "<string>"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {},
                  "auth": {
                    "type": "oauth2",
                    "oauth2": [
                      {
                        "type": "any",
                        "value": "read:pets write:pets",
                        "key": "scope"
                      },
                      {
                        "type": "any",
                        "value": "https://petstore.swagger.io/oauth/authorize",
                        "key": "authUrl"
                      },
                      {
                        "type": "any",
                        "value": "implicit",
                        "key": "grant_type"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "af25700f-242c-4c90-bd2b-dd29f6fa4ae1",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          "findByTags"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) Tags to filter by",
                              "type": "text/plain"
                            },
                            "key": "tags",
                            "value": "<string>"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"available\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"sold\"\n  }\n]",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "4fedcbb2-136b-44a9-ab92-2e3694e322da",
                    "name": "Invalid tag value",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "pet",
                          "findByTags"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) Tags to filter by",
                              "type": "text/plain"
                            },
                            "key": "tags",
                            "value": "<string>"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "description": {
                            "content": "Added as a part of security scheme: oauth2",
                            "type": "text/plain"
                          },
                          "key": "Authorization",
                          "value": "<token>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b39fc14-9a32-4ec3-beed-7553acd4bebd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed27451c-1840-44d2-ae74-3d61f2b44bb4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10284bd8-e076-42c4-9be7-319748795eb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f828853b-9d33-4ce2-a1df-288466286df5"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "c40e9111-4037-44f7-bbd3-cb5b8a7259a4",
        "name": "store",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "549c641f-59f2-4a81-b289-7e8cf1a49934",
            "name": "inventory",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "cebfbd69-0a80-476c-8ec4-b5824ebe9365",
                "name": "Returns pet inventories by status",
                "request": {
                  "name": "Returns pet inventories by status",
                  "description": {
                    "content": "Returns a map of status codes to quantities",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "store",
                      "inventory"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {},
                  "auth": {
                    "type": "apikey",
                    "apikey": [
                      {
                        "type": "any",
                        "value": "api_key",
                        "key": "key"
                      },
                      {
                        "type": "any",
                        "value": "{{apiKey}}",
                        "key": "value"
                      },
                      {
                        "type": "any",
                        "value": "header",
                        "key": "in"
                      }
                    ]
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "b425f8ea-7444-49a6-9c92-26b862a22e45",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "store",
                          "inventory"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        },
                        {
                          "description": {
                            "content": "Added as a part of security scheme: apikey",
                            "type": "text/plain"
                          },
                          "key": "api_key",
                          "value": "<API Key>"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n  \"Ut2be\": \"<integer>\",\n  \"fugiat2\": \"<integer>\",\n  \"dolor_03b\": \"<integer>\",\n  \"elit25\": \"<integer>\"\n}",
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d960f9c0-4b83-49bc-be21-8fb2b5a0db79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "441e971f-7a3b-42de-a515-00c4194c572b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "8806e06b-a533-4d4e-a23c-b59ca46ec668",
            "name": "order",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "a593cb7a-1531-42ad-92d4-e45f9a5544df",
                "name": "Place an order for a pet",
                "request": {
                  "name": "Place an order for a pet",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "store",
                      "order"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "320874f9-6a87-40d0-beff-74117af8d48b",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "store",
                          "order"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "0c958ae5-1d5b-4c15-9393-f0cf87c5ba12",
                    "name": "Invalid Order",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "store",
                          "order"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aa8fedc-508f-4c19-af0d-3eb0a2b065ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f661580a-7de0-44e6-aae9-ac982ad96acf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f177281-eefb-45be-8105-0f24e7adeb07"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "c2e5fa28-f6bc-49d9-93fe-a0d927c63006",
                "name": "{orderId}",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "43530f8d-95a1-41a5-b116-e355ee5a5223",
                    "name": "Find purchase order by ID",
                    "request": {
                      "name": "Find purchase order by ID",
                      "description": {
                        "content": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
                        "type": "text/plain"
                      },
                      "url": {
                        "path": [
                          "store",
                          "order",
                          ":orderId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) ID of pet that needs to be fetched",
                              "type": "text/plain"
                            },
                            "type": "any",
                            "value": "<long>",
                            "key": "orderId"
                          }
                        ]
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "response": [
                      {
                        "_": {
                          "postman_previewlanguage": "json"
                        },
                        "id": "ac0d27d7-6089-419f-a22a-b154fb25c673",
                        "name": "successful operation",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "header": [
                            {
                              "key": "Accept",
                              "value": "application/json"
                            }
                          ],
                          "method": "GET",
                          "body": {}
                        },
                        "status": "OK",
                        "code": 200,
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
                        "cookie": []
                      },
                      {
                        "_": {
                          "postman_previewlanguage": "text"
                        },
                        "id": "91866c74-d8b4-4d5a-a803-532a96bcfba4",
                        "name": "Invalid ID supplied",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "method": "GET",
                          "body": {}
                        },
                        "status": "Bad Request",
                        "code": 400,
                        "header": [],
                        "cookie": []
                      },
                      {
                        "_": {
                          "postman_previewlanguage": "text"
                        },
                        "id": "56eb90f5-f978-48bc-bf70-aaac64f1c33c",
                        "name": "Order not found",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "method": "GET",
                          "body": {}
                        },
                        "status": "Not Found",
                        "code": 404,
                        "header": [],
                        "cookie": []
                      }
                    ],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4582e3-645e-4b23-96fd-abfc12cc2382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197bcef1-2302-4edc-ac93-de9e56e6933d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(`Response status code is ${pm.response.code}`, function () {",
                            "    try {",
                            "        // Logando dados da requisição",
                            "        console.log('Request Method:', pm.request.method);",
                            "        console.log('Request URL:', pm.request.url.toString());",
                            "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                            "",
                            "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                            "            console.log('Request Body (raw):', pm.request.body.raw);",
                            "        } else if (pm.request.body) {",
                            "            console.log('Request Body:', pm.request.body.toString());",
                            "        } else {",
                            "            console.log('Request Body: none');",
                            "        }",
                            "",
                            "        // Verificando e logando o código de status da resposta",
                            "        const responseCode = pm.response.code;",
                            "        console.log('Response Code:', responseCode);",
                            "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                            "",
                            "        // Logando cabeçalhos da resposta",
                            "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                            "",
                            "        // Logando tempo de resposta",
                            "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                            "",
                            "        // Tentando analisar o corpo da resposta como JSON",
                            "        try {",
                            "            const jsonData = pm.response.json();",
                            "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                            "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                            "        } catch (e) {",
                            "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                            "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                            "        }",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao executar o teste:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response time is acceptable`, function () {",
                            "    try {",
                            "        const responseTime = pm.response.responseTime;",
                            "        console.log('Response Time:', responseTime, 'ms');",
                            "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response has JSON content-type`, function () {",
                            "    try {",
                            "        const contentType = pm.response.headers.get('Content-Type');",
                            "        console.log('Content-Type:', contentType);",
                            "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  },
                  {
                    "id": "f421c60a-9bce-46a2-8c18-9da173f314e2",
                    "name": "Delete purchase order by ID",
                    "request": {
                      "name": "Delete purchase order by ID",
                      "description": {
                        "content": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
                        "type": "text/plain"
                      },
                      "url": {
                        "path": [
                          "store",
                          "order",
                          ":orderId"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) ID of the order that needs to be deleted",
                              "type": "text/plain"
                            },
                            "type": "any",
                            "value": "<long>",
                            "key": "orderId"
                          }
                        ]
                      },
                      "method": "DELETE",
                      "body": {}
                    },
                    "response": [
                      {
                        "_": {
                          "postman_previewlanguage": "text"
                        },
                        "id": "42183edf-f00b-4fe8-9a09-c99961c32b6b",
                        "name": "Invalid ID supplied",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "method": "DELETE",
                          "body": {}
                        },
                        "status": "Bad Request",
                        "code": 400,
                        "header": [],
                        "cookie": []
                      },
                      {
                        "_": {
                          "postman_previewlanguage": "text"
                        },
                        "id": "51e0cff6-51ee-45d8-92d0-e76451edd948",
                        "name": "Order not found",
                        "originalRequest": {
                          "url": {
                            "path": [
                              "store",
                              "order",
                              ":orderId"
                            ],
                            "host": [
                              "{{baseUrl}}"
                            ],
                            "query": [],
                            "variable": []
                          },
                          "method": "DELETE",
                          "body": {}
                        },
                        "status": "Not Found",
                        "code": 404,
                        "header": [],
                        "cookie": []
                      }
                    ],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fece90af-e7f6-4686-b7e2-538d9e5654a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c50db58-39d2-42cc-9293-b896d86e6173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(`Response status code is ${pm.response.code}`, function () {",
                            "    try {",
                            "        // Logando dados da requisição",
                            "        console.log('Request Method:', pm.request.method);",
                            "        console.log('Request URL:', pm.request.url.toString());",
                            "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                            "",
                            "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                            "            console.log('Request Body (raw):', pm.request.body.raw);",
                            "        } else if (pm.request.body) {",
                            "            console.log('Request Body:', pm.request.body.toString());",
                            "        } else {",
                            "            console.log('Request Body: none');",
                            "        }",
                            "",
                            "        // Verificando e logando o código de status da resposta",
                            "        const responseCode = pm.response.code;",
                            "        console.log('Response Code:', responseCode);",
                            "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                            "",
                            "        // Logando cabeçalhos da resposta",
                            "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                            "",
                            "        // Logando tempo de resposta",
                            "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                            "",
                            "        // Tentando analisar o corpo da resposta como JSON",
                            "        try {",
                            "            const jsonData = pm.response.json();",
                            "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                            "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                            "        } catch (e) {",
                            "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                            "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                            "        }",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao executar o teste:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response time is acceptable`, function () {",
                            "    try {",
                            "        const responseTime = pm.response.responseTime;",
                            "        console.log('Response Time:', responseTime, 'ms');",
                            "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            "",
                            "pm.test(`Response has JSON content-type`, function () {",
                            "    try {",
                            "        const contentType = pm.response.headers.get('Content-Type');",
                            "        console.log('Content-Type:', contentType);",
                            "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                            "    } catch (e) {",
                            "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                            "        pm.expect(true).to.be.true; // Ignorar erros",
                            "    }",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "604c935e-071e-4fdf-b894-eb9b9055fccb"
                        }
                      }
                    ],
                    "protocolProfileBehavior": {
                      "disableBodyPruning": true
                    }
                  }
                ],
                "event": []
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "4fd8c2e8-e486-42d7-a074-a528e813288f",
        "name": "user",
        "description": {
          "content": "",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "79372629-5110-4d45-b8ad-eb3c455b7c56",
            "name": "createWithList",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "ca6462e6-06a5-4a40-b069-287ad8be6576",
                "name": "Creates list of users with given input array",
                "request": {
                  "name": "Creates list of users with given input array",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      "createWithList"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "504294cd-95ec-4d14-964b-373028cade75",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "createWithList"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Internal Server Error",
                    "code": 500,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02c41cda-2a3e-4df2-9818-4e5b9dfc9b22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5c43689-a429-4372-b0de-444429ea4204"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e71a940-d622-4c05-9653-07fba4add74f"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "d90fc182-f914-45df-aefa-3d34d22bda45",
            "name": "{username}",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "7393805c-8c15-4fe2-b1f0-fbee6a79b5ea",
                "name": "Get user by user name",
                "request": {
                  "name": "Get user by user name",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      ":username"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<string>",
                        "key": "username"
                      }
                    ]
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {}
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "06c618cd-f1e8-4c32-8d83-9aa3868d6427",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "cf6d7e15-a422-4a84-a5a8-41921c84a4dd",
                    "name": "Invalid username supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "e189112b-bc27-46d3-8d81-1d7880c0991d",
                    "name": "User not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb667599-a0ce-4708-9d57-376f7dd4b26e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc284f1e-6b4d-4305-b837-279136847e57"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "241c187e-16cb-4ca1-8eae-1d9376646235",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "0f5e7cfc-b2bf-4c91-9c9a-49536dc0c995",
                "name": "Updated user",
                "request": {
                  "name": "Updated user",
                  "description": {
                    "content": "This can only be done by the logged in user.",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      ":username"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) name that need to be updated",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<string>",
                        "key": "username"
                      }
                    ]
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "dd55cc00-1a75-4a3c-9b71-ecd65803b2b8",
                    "name": "Invalid user supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "PUT",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "bd13c3c9-1a33-4991-99d6-77c8ab77342c",
                    "name": "User not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "PUT",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60827f9e-4cc4-46a7-b010-2a651b464c21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12ecae7e-9306-4b83-9c7d-082141aee890"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb60fc86-7482-4406-b503-0feaed1c23bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f152ae6-443f-4958-975a-e70227b677fe"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              },
              {
                "id": "c35fd9bb-f278-4730-b460-0ab2874bf642",
                "name": "Delete user",
                "request": {
                  "name": "Delete user",
                  "description": {
                    "content": "This can only be done by the logged in user.",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      ":username"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) The name that needs to be deleted",
                          "type": "text/plain"
                        },
                        "type": "any",
                        "value": "<string>",
                        "key": "username"
                      }
                    ]
                  },
                  "method": "DELETE",
                  "body": {}
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "9efdff9e-e110-4aaa-8475-aa6f18ff3458",
                    "name": "Invalid username supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "2dcc9676-7055-424e-a333-c3a2644338e8",
                    "name": "User not found",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          ":username"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "DELETE",
                      "body": {}
                    },
                    "status": "Not Found",
                    "code": 404,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecb9aeeb-9fee-4d5d-b6bd-6ff389df5a87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53a85f72-81a9-4e2f-a259-a7e0307191ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1674d8a-c588-496e-a921-44ff62c68105",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68fb906f-a9d6-4e66-aa00-0968e713847e"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "705efb01-8585-41ae-9007-d8a38e3bb8ca",
            "name": "login",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "45706ea8-8a18-47ff-8d39-24394b2dd639",
                "name": "Logs user into the system",
                "request": {
                  "name": "Logs user into the system",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      "login"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) The user name for login",
                          "type": "text/plain"
                        },
                        "key": "username",
                        "value": "<string>"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "(Required) The password for login in clear text",
                          "type": "text/plain"
                        },
                        "key": "password",
                        "value": "<string>"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "GET",
                  "body": {}
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "json"
                    },
                    "id": "902ab266-2930-4c6e-8816-d9fc7c5555d4",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "login"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) The user name for login",
                              "type": "text/plain"
                            },
                            "key": "username",
                            "value": "<string>"
                          },
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) The password for login in clear text",
                              "type": "text/plain"
                            },
                            "key": "password",
                            "value": "<string>"
                          }
                        ],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "body": {}
                    },
                    "status": "OK",
                    "code": 200,
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "date in UTC when token expires",
                          "type": "text/plain"
                        },
                        "key": "X-Expires-After",
                        "value": "<dateTime>"
                      },
                      {
                        "disabled": false,
                        "description": {
                          "content": "calls per hour allowed by the user",
                          "type": "text/plain"
                        },
                        "key": "X-Rate-Limit",
                        "value": "<integer>"
                      }
                    ],
                    "body": "<string>",
                    "cookie": []
                  },
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "22914615-3e3e-46c2-8e1f-09796044ae5a",
                    "name": "Invalid username/password supplied",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "login"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) The user name for login",
                              "type": "text/plain"
                            },
                            "key": "username",
                            "value": "<string>"
                          },
                          {
                            "disabled": false,
                            "description": {
                              "content": "(Required) The password for login in clear text",
                              "type": "text/plain"
                            },
                            "key": "password",
                            "value": "<string>"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Bad Request",
                    "code": 400,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d2c6c1e-3edc-48be-b09e-b2dd50fcf5be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f14aa559-bca5-43a2-9ba6-1b63312294b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "e2bbd6b9-9089-4206-81c0-1b95d271d41e",
            "name": "logout",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "04dd4c34-aa0f-4a13-aaed-8e46e45aa2f9",
                "name": "Logs out current logged in user session",
                "request": {
                  "name": "Logs out current logged in user session",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      "logout"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "body": {}
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "65b47fa9-3ded-4ba1-8247-c7b744cc2fa7",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "logout"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET",
                      "body": {}
                    },
                    "status": "Internal Server Error",
                    "code": 500,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84c56660-e070-4069-8766-377f4f4eb704",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33eda341-8b13-421d-a0df-c8345ad2bde1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6faf545a-ef03-4c6a-9fb1-927d57638882",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "b44bb922-f2d3-4764-91a8-5eb7e6e51fd3",
            "name": "createWithArray",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "item": [
              {
                "id": "6039f492-678f-4c74-96ab-7f602aac0c00",
                "name": "Creates list of users with given input array",
                "request": {
                  "name": "Creates list of users with given input array",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "url": {
                    "path": [
                      "user",
                      "createWithArray"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [
                  {
                    "_": {
                      "postman_previewlanguage": "text"
                    },
                    "id": "462f1605-006e-475a-93c9-3c7ecd374649",
                    "name": "successful operation",
                    "originalRequest": {
                      "url": {
                        "path": [
                          "user",
                          "createWithArray"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                        "options": {
                          "raw": {
                            "headerFamily": "json",
                            "language": "json"
                          }
                        }
                      }
                    },
                    "status": "Internal Server Error",
                    "code": 500,
                    "header": [],
                    "cookie": []
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef19e088-1661-4200-b552-de3cf409523b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cc404f5-dbc4-4665-b8e3-2ad4628bcd47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(`Response status code is ${pm.response.code}`, function () {",
                        "    try {",
                        "        // Logando dados da requisição",
                        "        console.log('Request Method:', pm.request.method);",
                        "        console.log('Request URL:', pm.request.url.toString());",
                        "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                        "",
                        "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                        "            console.log('Request Body (raw):', pm.request.body.raw);",
                        "        } else if (pm.request.body) {",
                        "            console.log('Request Body:', pm.request.body.toString());",
                        "        } else {",
                        "            console.log('Request Body: none');",
                        "        }",
                        "",
                        "        // Verificando e logando o código de status da resposta",
                        "        const responseCode = pm.response.code;",
                        "        console.log('Response Code:', responseCode);",
                        "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                        "",
                        "        // Logando cabeçalhos da resposta",
                        "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                        "",
                        "        // Logando tempo de resposta",
                        "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                        "",
                        "        // Tentando analisar o corpo da resposta como JSON",
                        "        try {",
                        "            const jsonData = pm.response.json();",
                        "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                        "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                        "        } catch (e) {",
                        "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                        "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                        "        }",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao executar o teste:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response time is acceptable`, function () {",
                        "    try {",
                        "        const responseTime = pm.response.responseTime;",
                        "        console.log('Response Time:', responseTime, 'ms');",
                        "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        "",
                        "pm.test(`Response has JSON content-type`, function () {",
                        "    try {",
                        "        const contentType = pm.response.headers.get('Content-Type');",
                        "        console.log('Content-Type:', contentType);",
                        "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                        "    } catch (e) {",
                        "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                        "        pm.expect(true).to.be.true; // Ignorar erros",
                        "    }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
                    }
                  }
                ],
                "protocolProfileBehavior": {
                  "disableBodyPruning": true
                }
              }
            ],
            "event": []
          },
          {
            "id": "7b7093e6-8310-454c-bf5d-338f6f8423b6",
            "name": "Create user",
            "request": {
              "name": "Create user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                "options": {
                  "raw": {
                    "headerFamily": "json",
                    "language": "json"
                  }
                }
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "text"
                },
                "id": "40296fd5-7078-4eca-9bc1-63c5d89c727f",
                "name": "successful operation",
                "originalRequest": {
                  "url": {
                    "path": [
                      "user"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                    "options": {
                      "raw": {
                        "headerFamily": "json",
                        "language": "json"
                      }
                    }
                  }
                },
                "status": "Internal Server Error",
                "code": 500,
                "header": [],
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e544a6bc-3885-4daf-88f8-1d7334a644b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3bcf16b1-94bf-4b26-b066-2b49998178b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a0afa0d9-c83b-458b-8627-167ba2451552",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(`Response status code is ${pm.response.code}`, function () {",
                    "    try {",
                    "        // Logando dados da requisição",
                    "        console.log('Request Method:', pm.request.method);",
                    "        console.log('Request URL:', pm.request.url.toString());",
                    "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                    "",
                    "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                    "            console.log('Request Body (raw):', pm.request.body.raw);",
                    "        } else if (pm.request.body) {",
                    "            console.log('Request Body:', pm.request.body.toString());",
                    "        } else {",
                    "            console.log('Request Body: none');",
                    "        }",
                    "",
                    "        // Verificando e logando o código de status da resposta",
                    "        const responseCode = pm.response.code;",
                    "        console.log('Response Code:', responseCode);",
                    "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                    "",
                    "        // Logando cabeçalhos da resposta",
                    "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                    "",
                    "        // Logando tempo de resposta",
                    "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                    "",
                    "        // Tentando analisar o corpo da resposta como JSON",
                    "        try {",
                    "            const jsonData = pm.response.json();",
                    "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                    "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                    "        } catch (e) {",
                    "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                    "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                    "        }",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao executar o teste:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response time is acceptable`, function () {",
                    "    try {",
                    "        const responseTime = pm.response.responseTime;",
                    "        console.log('Response Time:', responseTime, 'ms');",
                    "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    "",
                    "pm.test(`Response has JSON content-type`, function () {",
                    "    try {",
                    "        const contentType = pm.response.headers.get('Content-Type');",
                    "        console.log('Content-Type:', contentType);",
                    "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                    "    } catch (e) {",
                    "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                    "        pm.expect(true).to.be.true; // Ignorar erros",
                    "    }",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "https://petstore.swagger.io/v2",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "e410ba95-9a8d-403e-bd0c-217f6a9769ba",
      "name": "Swagger Petstore",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "local-environment",
    "name": "Local Environment",
    "values": [
      {
        "type": "any",
        "value": "https://petstore.swagger.io",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "BearerYourTokenHere",
        "key": "tiger_token"
      }
    ]
  },
  "globals": {
    "id": "d1c6db3a-0b2b-4967-b531-542e0f1a19b0",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 40,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 60,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 269.3,
      "responseMin": 153,
      "responseMax": 1530,
      "responseSd": 293.62971579865683,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719709867418,
      "completed": 1719709873839
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047"
        },
        "item": {
          "id": "712a41de-87c6-43bb-8aa9-02c206662cbe",
          "name": "uploads an image",
          "request": {
            "name": "uploads an image",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                ":petId",
                "uploadImage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of pet to update",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "petId"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "description": {
                    "content": "Additional data to pass to server",
                    "type": "text/plain"
                  },
                  "key": "additionalMetadata",
                  "value": "<string>",
                  "type": "text"
                },
                {
                  "description": {
                    "content": "file to upload",
                    "type": "text/plain"
                  },
                  "key": "file",
                  "value": "<string>",
                  "type": "text"
                }
              ]
            },
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "70b44639-ce67-4861-996a-85266bd1c040",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId",
                    "uploadImage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "description": {
                        "content": "Additional data to pass to server",
                        "type": "text/plain"
                      },
                      "key": "additionalMetadata",
                      "value": "<string>",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "file to upload",
                        "type": "text/plain"
                      },
                      "key": "file",
                      "value": "<string>",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"code\": \"<integer>\",\n  \"type\": \"<string>\",\n  \"message\": \"<string>\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5449adb0-025b-409f-9d4e-006f310a291d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4c803458-cc98-4cbf-8530-3567ee5f13ae"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a370a4e0-2842-49a4-bd2e-238536e2781d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "71acb34a-0d30-4798-86f2-39c45166014f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "uploads an image",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "pet",
              "<long>",
              "uploadImage"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "multipart/form-data"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8c427072-5588-4429-b64c-65ac94905133",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 292,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "description": {
                  "content": "Additional data to pass to server",
                  "type": "text/plain"
                },
                "key": "additionalMetadata",
                "value": "<string>",
                "type": "text"
              },
              {
                "description": {
                  "content": "file to upload",
                  "type": "text/plain"
                },
                "key": "file",
                "value": "<string>",
                "type": "text"
              }
            ]
          },
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "fef6e7e7-c994-4b8d-95e8-f1b373ca9384",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1530,
          "responseSize": 146
        },
        "id": "712a41de-87c6-43bb-8aa9-02c206662cbe",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a"
        },
        "item": {
          "id": "c9cc5a5e-d9ef-487d-86b3-201bad13b859",
          "name": "Find pet by ID",
          "request": {
            "name": "Find pet by ID",
            "description": {
              "content": "Returns a single pet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                ":petId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of pet to return",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "petId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {},
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "any",
                  "value": "api_key",
                  "key": "key"
                },
                {
                  "type": "any",
                  "value": "{{apiKey}}",
                  "key": "value"
                },
                {
                  "type": "any",
                  "value": "header",
                  "key": "in"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "8b5b52b3-90cb-4682-9b55-bb7d0123a1b0",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<API Key>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "4f2dd842-a201-4b86-9ff7-812b334d899e",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<API Key>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "57a404c7-1673-4cb4-ad7e-4530f6fcd890",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<API Key>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2ed15131-6731-49d2-9834-e9b3558e49e7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "bf1febfd-9bf9-4e7a-ba87-914d8363cb53"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2af990f-3848-457c-9293-bc2c8030a169",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Find pet by ID",
          "description": {
            "content": "Returns a single pet",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "pet",
              "<long>"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "api_key",
              "value": "{{apiKey}}",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1da679a8-25bb-4b36-92bf-9c6a16cf2442",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {},
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "any",
                "value": "api_key",
                "key": "key"
              },
              {
                "type": "any",
                "value": "{{apiKey}}",
                "key": "value"
              },
              {
                "type": "any",
                "value": "header",
                "key": "in"
              }
            ]
          }
        },
        "response": {
          "id": "98d3d0dd-109a-4352-b4ae-f99762657d0c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 172,
          "responseSize": 146
        },
        "id": "c9cc5a5e-d9ef-487d-86b3-201bad13b859",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5"
        },
        "item": {
          "id": "f3bb0214-8815-493c-a9b7-520785244b91",
          "name": "Updates a pet in the store with form data",
          "request": {
            "name": "Updates a pet in the store with form data",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                ":petId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of pet that needs to be updated",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "petId"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Updated name of the pet",
                    "type": "text/plain"
                  },
                  "key": "name",
                  "value": "<string>"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Updated status of the pet",
                    "type": "text/plain"
                  },
                  "key": "status",
                  "value": "<string>"
                }
              ]
            },
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "c53131af-2789-4ef0-8e6c-2de1b0fec768",
              "name": "Invalid input",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "Updated name of the pet",
                        "type": "text/plain"
                      },
                      "key": "name",
                      "value": "<string>"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "Updated status of the pet",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "<string>"
                    }
                  ]
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ea94b06f-a6f3-4789-8e81-3a2fcd8a0451",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6947baa8-7a82-48cb-8cc1-f48b11a91123"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "356232ae-bea5-44db-8a68-821224758e9b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Updates a pet in the store with form data",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "pet",
              "<long>"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e74d090-7c09-4f31-8e57-5c77bacccf9e",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 37,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "disabled": false,
                "description": {
                  "content": "Updated name of the pet",
                  "type": "text/plain"
                },
                "key": "name",
                "value": "<string>"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Updated status of the pet",
                  "type": "text/plain"
                },
                "key": "status",
                "value": "<string>"
              }
            ]
          },
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "7094b590-39e3-4721-bc55-4dc922022713",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 190,
          "responseSize": 146
        },
        "id": "f3bb0214-8815-493c-a9b7-520785244b91",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16"
        },
        "item": {
          "id": "e9a684ae-3e0c-4e18-811e-fd090001c04c",
          "name": "Deletes a pet",
          "request": {
            "name": "Deletes a pet",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                ":petId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Pet id to delete",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "petId"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "key": "api_key",
                "value": "<string>"
              }
            ],
            "method": "DELETE",
            "body": {},
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "a9ba75bb-75d6-48fd-8e24-5b59599052b1",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "4b5451ca-59fa-4672-82a4-23a462899352",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    ":petId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4b5168e7-55ea-4c79-893a-0e0afe6babd8",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d6f830ac-d427-4377-8a57-8687611f023f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Deletes a pet",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "pet",
              "<long>"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "key": "api_key",
              "value": "<string>"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "395f427e-cfe1-4e9f-986a-35973ce73fa0",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {},
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "6864579a-9370-4d8b-9bca-1244a5cbfd52",
          "status": "Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Content-Length",
              "value": "150"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 198,
          "responseSize": 150
        },
        "id": "e9a684ae-3e0c-4e18-811e-fd090001c04c",
        "assertions": [
          {
            "assertion": "Response status code is 405",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f"
        },
        "item": {
          "id": "9ff0051f-2159-47ee-9506-d417138faf42",
          "name": "Add a new pet to the store",
          "request": {
            "name": "Add a new pet to the store",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "47db1566-2cb2-4c7d-8ee8-2a24e9bf8b31",
              "name": "Invalid input",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b5ecdcab-42a6-4f1c-b9f4-3d5d70e875c5",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "256d42ae-adb6-44b6-851a-e87d27893ca4"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7793b9c3-7acc-4633-8f83-857b96aa8530",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Add a new pet to the store",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "pet"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3029af78-ec41-477c-8387-3b2fb25b238e",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 320,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "245dd022-84b0-413f-92ac-073ebb6f9948",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 299,
          "responseSize": 146
        },
        "id": "9ff0051f-2159-47ee-9506-d417138faf42",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751"
        },
        "item": {
          "id": "7a02ef29-29ae-4f40-8eae-91d1b6789ac2",
          "name": "Update an existing pet",
          "request": {
            "name": "Update an existing pet",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "92f9094f-7988-4603-b79f-7e203486fa8b",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "87a7178c-c0a1-4ede-9a42-031095890f91",
              "name": "Pet not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "635863d8-2790-4518-95c3-e2359fb69189",
              "name": "Validation exception",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "44bbcb12-bc99-4a6e-902f-d72aa1e5a2ed",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "439eeef5-2d8b-4d0e-b533-6ccb5c6f2236"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "08737a42-9e90-4183-bbdc-c4e7848da774",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "9293b795-b081-4164-8203-d06fb6339072"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Update an existing pet",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "pet"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "722543e0-494e-4d92-9f57-09e8dc5a5993",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 320,
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "1258e100-2329-4917-91a1-9aa5afbd9bab",
          "status": "Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Content-Length",
              "value": "150"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 356,
          "responseSize": 150
        },
        "id": "7a02ef29-29ae-4f40-8eae-91d1b6789ac2",
        "assertions": [
          {
            "assertion": "Response status code is 405",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90"
        },
        "item": {
          "id": "65923227-72a6-4091-8abe-903df6047daa",
          "name": "Finds Pets by status",
          "request": {
            "name": "Finds Pets by status",
            "description": {
              "content": "Multiple status values can be provided with comma separated strings",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByStatus"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Status values that need to be considered for filter",
                    "type": "text/plain"
                  },
                  "key": "status",
                  "value": "available"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Status values that need to be considered for filter",
                    "type": "text/plain"
                  },
                  "key": "status",
                  "value": "available"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {},
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "39ad6230-27ff-4ce7-85e3-ce0447a63b6c",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Status values that need to be considered for filter",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "available"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"available\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"sold\"\n  }\n]",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "5202a2da-516c-4671-b5f1-a63623dcbcba",
              "name": "Invalid status value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByStatus"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Status values that need to be considered for filter",
                        "type": "text/plain"
                      },
                      "key": "status",
                      "value": "available"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2e897684-83f5-41ae-9f8a-270fad92b76f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "563fe503-4821-4a6a-ab1a-06748c63d987"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Finds Pets by status",
          "description": {
            "content": "Multiple status values can be provided with comma separated strings",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "pet",
              "findByStatus"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [
              {
                "key": "status",
                "value": "available"
              },
              {
                "key": "status",
                "value": "available"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "069968b4-6ed6-4e28-8e5f-9e51961e6e66",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {},
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "6ee5c7fc-2b0a-421a-9389-b931c3394d63",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 248,
          "responseSize": 146
        },
        "id": "65923227-72a6-4091-8abe-903df6047daa",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef"
        },
        "item": {
          "id": "81a6d87b-7929-4b8d-9bf4-0073c385754f",
          "name": "Finds Pets by tags",
          "request": {
            "name": "Finds Pets by tags",
            "description": {
              "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "pet",
                "findByTags"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Tags to filter by",
                    "type": "text/plain"
                  },
                  "key": "tags",
                  "value": "<string>"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Tags to filter by",
                    "type": "text/plain"
                  },
                  "key": "tags",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {},
            "auth": {
              "type": "oauth2",
              "oauth2": [
                {
                  "type": "any",
                  "value": "read:pets write:pets",
                  "key": "scope"
                },
                {
                  "type": "any",
                  "value": "https://petstore.swagger.io/oauth/authorize",
                  "key": "authUrl"
                },
                {
                  "type": "any",
                  "value": "implicit",
                  "key": "grant_type"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "af25700f-242c-4c90-bd2b-dd29f6fa4ae1",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Tags to filter by",
                        "type": "text/plain"
                      },
                      "key": "tags",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"available\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"sold\"\n  }\n]",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "4fedcbb2-136b-44a9-ab92-2e3694e322da",
              "name": "Invalid tag value",
              "originalRequest": {
                "url": {
                  "path": [
                    "pet",
                    "findByTags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Tags to filter by",
                        "type": "text/plain"
                      },
                      "key": "tags",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: oauth2",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "<token>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7b39fc14-9a32-4ec3-beed-7553acd4bebd",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ed27451c-1840-44d2-ae74-3d61f2b44bb4"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "10284bd8-e076-42c4-9be7-319748795eb6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f828853b-9d33-4ce2-a1df-288466286df5"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Finds Pets by tags",
          "description": {
            "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "pet",
              "findByTags"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [
              {
                "key": "tags",
                "value": "<string>"
              },
              {
                "key": "tags",
                "value": "<string>"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8689f4ec-26ee-46d0-a226-2fcefebb38b6",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {},
          "auth": {
            "type": "oauth2",
            "oauth2": [
              {
                "type": "any",
                "value": "read:pets write:pets",
                "key": "scope"
              },
              {
                "type": "any",
                "value": "https://petstore.swagger.io/oauth/authorize",
                "key": "authUrl"
              },
              {
                "type": "any",
                "value": "implicit",
                "key": "grant_type"
              }
            ]
          }
        },
        "response": {
          "id": "6ebe8371-fbed-432b-b2fe-66ce9b39a885",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:11 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 255,
          "responseSize": 146
        },
        "id": "81a6d87b-7929-4b8d-9bf4-0073c385754f",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c"
        },
        "item": {
          "id": "cebfbd69-0a80-476c-8ec4-b5824ebe9365",
          "name": "Returns pet inventories by status",
          "request": {
            "name": "Returns pet inventories by status",
            "description": {
              "content": "Returns a map of status codes to quantities",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "inventory"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {},
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "type": "any",
                  "value": "api_key",
                  "key": "key"
                },
                {
                  "type": "any",
                  "value": "{{apiKey}}",
                  "key": "value"
                },
                {
                  "type": "any",
                  "value": "header",
                  "key": "in"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b425f8ea-7444-49a6-9c92-26b862a22e45",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "inventory"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "api_key",
                    "value": "<API Key>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"Ut2be\": \"<integer>\",\n  \"fugiat2\": \"<integer>\",\n  \"dolor_03b\": \"<integer>\",\n  \"elit25\": \"<integer>\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d960f9c0-4b83-49bc-be21-8fb2b5a0db79",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "441e971f-7a3b-42de-a515-00c4194c572b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Returns pet inventories by status",
          "description": {
            "content": "Returns a map of status codes to quantities",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "store",
              "inventory"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "api_key",
              "value": "{{apiKey}}",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "20ce07b5-a36a-435a-a454-1a974390496b",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {},
          "auth": {
            "type": "apikey",
            "apikey": [
              {
                "type": "any",
                "value": "api_key",
                "key": "key"
              },
              {
                "type": "any",
                "value": "{{apiKey}}",
                "key": "value"
              },
              {
                "type": "any",
                "value": "header",
                "key": "in"
              }
            ]
          }
        },
        "response": {
          "id": "ddcc6c60-c61b-4837-b052-1d1b39edf7ce",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:11 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 211,
          "responseSize": 146
        },
        "id": "cebfbd69-0a80-476c-8ec4-b5824ebe9365",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff"
        },
        "item": {
          "id": "a593cb7a-1531-42ad-92d4-e45f9a5544df",
          "name": "Place an order for a pet",
          "request": {
            "name": "Place an order for a pet",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "order"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "320874f9-6a87-40d0-beff-74117af8d48b",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "0c958ae5-1d5b-4c15-9393-f0cf87c5ba12",
              "name": "Invalid Order",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aa8fedc-508f-4c19-af0d-3eb0a2b065ef",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f661580a-7de0-44e6-aae9-ac982ad96acf"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "9f177281-eefb-45be-8105-0f24e7adeb07"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Place an order for a pet",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "store",
              "order"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "69534701-4333-44e6-9451-ae83a81175e6",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 145,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b58d378e-08eb-40c0-8586-9cb3b6de21bd",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:11 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 204,
          "responseSize": 146
        },
        "id": "a593cb7a-1531-42ad-92d4-e45f9a5544df",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b"
        },
        "item": {
          "id": "43530f8d-95a1-41a5-b116-e355ee5a5223",
          "name": "Find purchase order by ID",
          "request": {
            "name": "Find purchase order by ID",
            "description": {
              "content": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "order",
                ":orderId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of pet that needs to be fetched",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "orderId"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ac0d27d7-6089-419f-a22a-b154fb25c673",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "91866c74-d8b4-4d5a-a803-532a96bcfba4",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "56eb90f5-f978-48bc-bf70-aaac64f1c33c",
              "name": "Order not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "eb4582e3-645e-4b23-96fd-abfc12cc2382",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "197bcef1-2302-4edc-ac93-de9e56e6933d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Find purchase order by ID",
          "description": {
            "content": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "store",
              "order",
              "<long>"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d8be98bd-68ba-4b3f-8340-af573f3636f6",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {}
        },
        "response": {
          "id": "4d81201b-f1ca-4196-9d1a-9032ffc2a021",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:11 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 198,
          "responseSize": 146
        },
        "id": "43530f8d-95a1-41a5-b116-e355ee5a5223",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c"
        },
        "item": {
          "id": "f421c60a-9bce-46a2-8c18-9da173f314e2",
          "name": "Delete purchase order by ID",
          "request": {
            "name": "Delete purchase order by ID",
            "description": {
              "content": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "store",
                "order",
                ":orderId"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) ID of the order that needs to be deleted",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<long>",
                  "key": "orderId"
                }
              ]
            },
            "method": "DELETE",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "42183edf-f00b-4fe8-9a09-c99961c32b6b",
              "name": "Invalid ID supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "51e0cff6-51ee-45d8-92d0-e76451edd948",
              "name": "Order not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "store",
                    "order",
                    ":orderId"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fece90af-e7f6-4686-b7e2-538d9e5654a7",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "1c50db58-39d2-42cc-9293-b896d86e6173"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "604c935e-071e-4fdf-b894-eb9b9055fccb"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Delete purchase order by ID",
          "description": {
            "content": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "store",
              "order",
              "<long>"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0b258981-7a0d-4057-9d4b-3f80d86d091e",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {}
        },
        "response": {
          "id": "608bfec8-fe39-4ec3-8c14-3930a3a2379b",
          "status": "Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:12 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Content-Length",
              "value": "150"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 199,
          "responseSize": 150
        },
        "id": "f421c60a-9bce-46a2-8c18-9da173f314e2",
        "assertions": [
          {
            "assertion": "Response status code is 405",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e"
        },
        "item": {
          "id": "ca6462e6-06a5-4a40-b069-287ad8be6576",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithList"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "504294cd-95ec-4d14-964b-373028cade75",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithList"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "02c41cda-2a3e-4df2-9818-4e5b9dfc9b22",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c5c43689-a429-4372-b0de-444429ea4204"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "1e71a940-d622-4c05-9653-07fba4add74f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Creates list of users with given input array",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "user",
              "createWithList"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fc818b40-2345-4491-9a2e-708530534d4f",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 446,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "673c4979-45ed-4813-9a87-dcdbdcaf8d7c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:12 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 189,
          "responseSize": 146
        },
        "id": "ca6462e6-06a5-4a40-b069-287ad8be6576",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0"
        },
        "item": {
          "id": "7393805c-8c15-4fe2-b1f0-fbee6a79b5ea",
          "name": "Get user by user name",
          "request": {
            "name": "Get user by user name",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "username"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "06c618cd-f1e8-4c32-8d83-9aa3868d6427",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "cf6d7e15-a422-4a84-a5a8-41921c84a4dd",
              "name": "Invalid username supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "e189112b-bc27-46d3-8d81-1d7880c0991d",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fb667599-a0ce-4708-9d57-376f7dd4b26e",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "fc284f1e-6b4d-4305-b837-279136847e57"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "241c187e-16cb-4ca1-8eae-1d9376646235",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Get user by user name",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "user",
              "<string>"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cf911757-f7a1-4de8-ae4e-f01395f82b3d",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {}
        },
        "response": {
          "id": "c838f65d-f836-4ecf-89f6-53265e8ff1f9",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:12 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 163,
          "responseSize": 146
        },
        "id": "7393805c-8c15-4fe2-b1f0-fbee6a79b5ea",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e"
        },
        "item": {
          "id": "0f5e7cfc-b2bf-4c91-9c9a-49536dc0c995",
          "name": "Updated user",
          "request": {
            "name": "Updated user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) name that need to be updated",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "username"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "dd55cc00-1a75-4a3c-9b71-ecd65803b2b8",
              "name": "Invalid user supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "bd13c3c9-1a33-4991-99d6-77c8ab77342c",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60827f9e-4cc4-46a7-b010-2a651b464c21",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "12ecae7e-9306-4b83-9c7d-082141aee890"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eb60fc86-7482-4406-b503-0feaed1c23bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "1f152ae6-443f-4958-975a-e70227b677fe"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Updated user",
          "description": {
            "content": "This can only be done by the logged in user.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "user",
              "<string>"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a9003464-6f9a-42df-8d16-6d6c3172c601",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 200,
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "497ee83b-5da0-4c44-b156-e875522525e6",
          "status": "Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:12 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Content-Length",
              "value": "150"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 155,
          "responseSize": 150
        },
        "id": "0f5e7cfc-b2bf-4c91-9c9a-49536dc0c995",
        "assertions": [
          {
            "assertion": "Response status code is 405",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6"
        },
        "item": {
          "id": "c35fd9bb-f278-4730-b460-0ab2874bf642",
          "name": "Delete user",
          "request": {
            "name": "Delete user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The name that needs to be deleted",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "username"
                }
              ]
            },
            "method": "DELETE",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "9efdff9e-e110-4aaa-8475-aa6f18ff3458",
              "name": "Invalid username supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "2dcc9676-7055-424e-a333-c3a2644338e8",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ecb9aeeb-9fee-4d5d-b6bd-6ff389df5a87",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "53a85f72-81a9-4e2f-a259-a7e0307191ba"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a1674d8a-c588-496e-a921-44ff62c68105",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "68fb906f-a9d6-4e66-aa00-0968e713847e"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Delete user",
          "description": {
            "content": "This can only be done by the logged in user.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "user",
              "<string>"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ed11d11b-8003-40a9-8c42-f98639eac51a",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {}
        },
        "response": {
          "id": "c04cd8ad-bd07-4018-a307-b3cdbeebd58b",
          "status": "Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:13 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Content-Length",
              "value": "150"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              53,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 153,
          "responseSize": 150
        },
        "id": "c35fd9bb-f278-4730-b460-0ab2874bf642",
        "assertions": [
          {
            "assertion": "Response status code is 405",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f"
        },
        "item": {
          "id": "45706ea8-8a18-47ff-8d39-24394b2dd639",
          "name": "Logs user into the system",
          "request": {
            "name": "Logs user into the system",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The user name for login",
                    "type": "text/plain"
                  },
                  "key": "username",
                  "value": "<string>"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) The password for login in clear text",
                    "type": "text/plain"
                  },
                  "key": "password",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "902ab266-2930-4c6e-8816-d9fc7c5555d4",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The user name for login",
                        "type": "text/plain"
                      },
                      "key": "username",
                      "value": "<string>"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The password for login in clear text",
                        "type": "text/plain"
                      },
                      "key": "password",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "date in UTC when token expires",
                    "type": "text/plain"
                  },
                  "key": "X-Expires-After",
                  "value": "<dateTime>"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "calls per hour allowed by the user",
                    "type": "text/plain"
                  },
                  "key": "X-Rate-Limit",
                  "value": "<integer>"
                }
              ],
              "body": "<string>",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "22914615-3e3e-46c2-8e1f-09796044ae5a",
              "name": "Invalid username/password supplied",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The user name for login",
                        "type": "text/plain"
                      },
                      "key": "username",
                      "value": "<string>"
                    },
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) The password for login in clear text",
                        "type": "text/plain"
                      },
                      "key": "password",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d2c6c1e-3edc-48be-b09e-b2dd50fcf5be",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f14aa559-bca5-43a2-9ba6-1b63312294b0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Logs user into the system",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "user",
              "login"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [
              {
                "key": "username",
                "value": "<string>"
              },
              {
                "key": "password",
                "value": "<string>"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35e499b6-a637-40fb-b5ea-4133c34e7c79",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {}
        },
        "response": {
          "id": "957f32e0-73ec-4ac4-9d0d-41476804431a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:13 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 191,
          "responseSize": 146
        },
        "id": "45706ea8-8a18-47ff-8d39-24394b2dd639",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d"
        },
        "item": {
          "id": "04dd4c34-aa0f-4a13-aaed-8e46e45aa2f9",
          "name": "Logs out current logged in user session",
          "request": {
            "name": "Logs out current logged in user session",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {}
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "65b47fa9-3ded-4ba1-8247-c7b744cc2fa7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "logout"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "84c56660-e070-4069-8766-377f4f4eb704",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "33eda341-8b13-421d-a0df-c8345ad2bde1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6faf545a-ef03-4c6a-9fb1-927d57638882",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Logs out current logged in user session",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "user",
              "logout"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f55e4c9-fe1d-4599-a792-dd6175a5c40c",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {}
        },
        "response": {
          "id": "1698a265-c459-4ea0-9c68-5f1d67c08dc7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:13 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 159,
          "responseSize": 146
        },
        "id": "04dd4c34-aa0f-4a13-aaed-8e46e45aa2f9",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5"
        },
        "item": {
          "id": "6039f492-678f-4c74-96ab-7f602aac0c00",
          "name": "Creates list of users with given input array",
          "request": {
            "name": "Creates list of users with given input array",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user",
                "createWithArray"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "462f1605-006e-475a-93c9-3c7ecd374649",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user",
                    "createWithArray"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ef19e088-1661-4200-b552-de3cf409523b",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9cc404f5-dbc4-4665-b8e3-2ad4628bcd47"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Creates list of users with given input array",
          "description": {
            "content": "",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "user",
              "createWithArray"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "959e02a5-54c4-48a8-92de-a6d1f3801895",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 446,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "8ddb8b01-3805-44fc-abaa-3004f37187d2",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:13 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 160,
          "responseSize": 146
        },
        "id": "6039f492-678f-4c74-96ab-7f602aac0c00",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738"
        },
        "item": {
          "id": "7b7093e6-8310-454c-bf5d-338f6f8423b6",
          "name": "Create user",
          "request": {
            "name": "Create user",
            "description": {
              "content": "This can only be done by the logged in user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
              "options": {
                "raw": {
                  "headerFamily": "json",
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "40296fd5-7078-4eca-9bc1-63c5d89c727f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "user"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [],
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e544a6bc-3885-4daf-88f8-1d7334a644b5",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "3bcf16b1-94bf-4b26-b066-2b49998178b8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0afa0d9-c83b-458b-8627-167ba2451552",
                "type": "text/javascript",
                "exec": [
                  "pm.test(`Response status code is ${pm.response.code}`, function () {",
                  "    try {",
                  "        // Logando dados da requisição",
                  "        console.log('Request Method:', pm.request.method);",
                  "        console.log('Request URL:', pm.request.url.toString());",
                  "        console.log('Request Headers:', JSON.stringify(pm.request.headers.toObject(), null, 2));",
                  "",
                  "        if (pm.request.body && pm.request.body.mode === 'raw') {",
                  "            console.log('Request Body (raw):', pm.request.body.raw);",
                  "        } else if (pm.request.body) {",
                  "            console.log('Request Body:', pm.request.body.toString());",
                  "        } else {",
                  "            console.log('Request Body: none');",
                  "        }",
                  "",
                  "        // Verificando e logando o código de status da resposta",
                  "        const responseCode = pm.response.code;",
                  "        console.log('Response Code:', responseCode);",
                  "        pm.expect(responseCode).to.be.oneOf([responseCode], `Expected response code to be ${responseCode}, but got ${responseCode}`);",
                  "",
                  "        // Logando cabeçalhos da resposta",
                  "        console.log('Response Headers:', JSON.stringify(pm.response.headers.toObject(), null, 2));",
                  "",
                  "        // Logando tempo de resposta",
                  "        console.log('Response Time:', pm.response.responseTime, 'ms');",
                  "",
                  "        // Tentando analisar o corpo da resposta como JSON",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Corpo da Resposta:', JSON.stringify(jsonData, null, 2));",
                  "            pm.expect(jsonData).to.be.an('object', \"O corpo da resposta deve ser um objeto.\");",
                  "        } catch (e) {",
                  "            console.warn(\"Não foi possível analisar o corpo da resposta como JSON: \", e);",
                  "            pm.expect(true).to.be.true; // Garantir que o teste passe",
                  "        }",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao executar o teste:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response time is acceptable`, function () {",
                  "    try {",
                  "        const responseTime = pm.response.responseTime;",
                  "        console.log('Response Time:', responseTime, 'ms');",
                  "        pm.expect(responseTime).to.be.below(2000, `Expected response time to be below 2000ms, but got ${responseTime}ms`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o tempo de resposta:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  "",
                  "pm.test(`Response has JSON content-type`, function () {",
                  "    try {",
                  "        const contentType = pm.response.headers.get('Content-Type');",
                  "        console.log('Content-Type:', contentType);",
                  "        pm.expect(contentType).to.include('application/json', `Expected Content-Type to include 'application/json', but got ${contentType}`);",
                  "    } catch (e) {",
                  "        console.error(\"Erro ao verificar o Content-Type:\", e);",
                  "        pm.expect(true).to.be.true; // Ignorar erros",
                  "    }",
                  "});",
                  ""
                ],
                "_lastExecutionId": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "Create user",
          "description": {
            "content": "This can only be done by the logged in user.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "user"
            ],
            "host": [
              "petstore",
              "swagger",
              "io"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b6727844-51df-43aa-81ec-84edd0b62e63",
              "system": true
            },
            {
              "key": "Host",
              "value": "petstore.swagger.io",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 200,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
            "options": {
              "raw": {
                "headerFamily": "json",
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "5d920560-6048-4d69-b2a6-8ee1a176c464",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Sun, 30 Jun 2024 01:11:13 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "nginx"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "Content-Security-Policy",
              "value": "frame-ancestors 'none'"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              13,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              13,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              60,
              104,
              49,
              62,
              52,
              48,
              52,
              32,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              60,
              47,
              104,
              49,
              62,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              104,
              114,
              62,
              60,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              110,
              103,
              105,
              110,
              120,
              60,
              47,
              99,
              101,
              110,
              116,
              101,
              114,
              62,
              13,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              13,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              13,
              10
            ]
          },
          "cookie": [],
          "responseTime": 156,
          "responseSize": 146
        },
        "id": "7b7093e6-8310-454c-bf5d-338f6f8423b6",
        "assertions": [
          {
            "assertion": "Response status code is 404",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Response has JSON content-type",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2940
    },
    "failures": [],
    "error": null
  },
  "consoleLogs": {
    "fe3dad96-3600-422f-aceb-b31ce8436f16": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/pet/<long>/uploadImage"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"multipart/form-data\",\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"8c427072-5588-4429-b64c-65ac94905133\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 292\n}"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:09 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          1530,
          "ms"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          1530,
          "ms"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 20,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe3dad96-3600-422f-aceb-b31ce8436f16",
          "httpRequestId": "afe8547e-cbeb-452a-ac08-5a5a5671a047",
          "scriptId": "a370a4e0-2842-49a4-bd2e-238536e2781d",
          "execution": "71acb34a-0d30-4798-86f2-39c45166014f"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "d56b7385-4407-476c-b3b1-4a8f6d5df169": [
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/pet/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"api_key\": \"{{apiKey}}\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"1da679a8-25bb-4b36-92bf-9c6a16cf2442\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:09 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          172,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          172,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "d56b7385-4407-476c-b3b1-4a8f6d5df169",
          "length": 20,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f5c9ba55-12cf-4f62-98ee-95477166903a",
          "scriptId": "a2af990f-3848-457c-9293-bc2c8030a169",
          "execution": "bf6bbec1-cd62-4326-a1a1-654f6e153171"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "d86da19a-7bbe-42d2-abff-09cb28390bae": [
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/pet/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/x-www-form-urlencoded\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"7e74d090-7c09-4f31-8e57-5c77bacccf9e\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 37\n}"
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          "name=<string>&status=<string>"
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:09 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          190,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          190,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "d86da19a-7bbe-42d2-abff-09cb28390bae",
          "length": 20,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5ceb7d9c-d71c-4a44-ae50-46e51683a2a5",
          "scriptId": "356232ae-bea5-44db-8a68-821224758e9b",
          "execution": "da8afe3a-f067-4678-a5fb-776bce5c4c00"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "b480da53-4d56-4321-a8a8-7f02e1be1a0d": [
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "DELETE"
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/pet/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"api_key\": \"<string>\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"395f427e-cfe1-4e9f-986a-35973ce73fa0\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          405
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:09 GMT\",\n  \"content-type\": \"text/html\",\n  \"content-length\": \"150\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          198,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          198,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "b480da53-4d56-4321-a8a8-7f02e1be1a0d",
          "length": 20,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7cea29c-f854-4286-94bb-eb96ab757d16",
          "scriptId": "195454d0-739d-49ad-ba88-4bc2ce3de0ae",
          "execution": "56d359c3-2238-4ce0-953a-15dd2fc914e4"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "f1fef359-be22-4a18-a3cb-76cda4498e0e": [
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/pet"
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"3029af78-ec41-477c-8387-3b2fb25b238e\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 320\n}"
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:10 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          299,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          299,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "f1fef359-be22-4a18-a3cb-76cda4498e0e",
          "length": 20,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ab373143-bada-4f77-a5ec-f400d0ca483f",
          "scriptId": "7793b9c3-7acc-4633-8f83-857b96aa8530",
          "execution": "2049a8e7-8800-43c2-8a70-0c39b4842f3f"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "3d91fa47-6ba6-4297-ac81-672d5079fa86": [
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "PUT"
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/pet"
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"722543e0-494e-4d92-9f57-09e8dc5a5993\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 320\n}"
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"available\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          405
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:10 GMT\",\n  \"content-type\": \"text/html\",\n  \"content-length\": \"150\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          356,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          356,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "3d91fa47-6ba6-4297-ac81-672d5079fa86",
          "length": 20,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2e3df0dc-bc1b-442c-96df-be016dafb751",
          "scriptId": "08737a42-9e90-4183-bbdc-c4e7848da774",
          "execution": "9293b795-b081-4164-8203-d06fb6339072"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "084dd69a-215e-449b-9185-7029750682a9": [
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/pet/findByStatus?status=available&status=available"
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"069968b4-6ed6-4e28-8e5f-9e51961e6e66\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:10 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          248,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          248,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "084dd69a-215e-449b-9185-7029750682a9",
          "length": 20,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e69027c0-6e5a-4015-9539-cd6d05f72f90",
          "scriptId": "0dd90df7-b922-4ac6-a33a-101d710da2ac",
          "execution": "388c4a49-e2c7-4184-9b1d-84bc4eec483f"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "cf4975f5-e399-48f1-81d4-7f65e08fe4a0": [
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/pet/findByTags?tags=<string>&tags=<string>"
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"8689f4ec-26ee-46d0-a226-2fcefebb38b6\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:11 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          255,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          255,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "cf4975f5-e399-48f1-81d4-7f65e08fe4a0",
          "length": 20,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8587c78d-ee31-4663-b77f-ceb31d4a7fef",
          "scriptId": "10284bd8-e076-42c4-9be7-319748795eb6",
          "execution": "f828853b-9d33-4ce2-a1df-288466286df5"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "46bfe5e1-e997-43b4-856d-89e7a6a846ee": [
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/store/inventory"
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"api_key\": \"{{apiKey}}\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"20ce07b5-a36a-435a-a454-1a974390496b\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:11 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          211,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          211,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "46bfe5e1-e997-43b4-856d-89e7a6a846ee",
          "length": 20,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6946cd46-4479-4793-b60b-e6327aedcf3c",
          "scriptId": "582955d4-d2f6-420e-9b27-f4b85602e2d2",
          "execution": "c4a2453b-0a98-4e46-b664-ee172e0a7944"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "19791444-97e4-43cf-9d85-349c447e6bcf": [
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/store/order"
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"69534701-4333-44e6-9451-ae83a81175e6\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 145\n}"
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:11 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          204,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          204,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "19791444-97e4-43cf-9d85-349c447e6bcf",
          "length": 20,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "875a295b-7aad-40fa-8b97-f96886f82fff",
          "scriptId": "a1deba1a-bcdb-44b6-88f6-e88e0c8d9ccb",
          "execution": "9f177281-eefb-45be-8105-0f24e7adeb07"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "3169abe9-ffbf-4626-b152-8ae19a25cb26": [
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/store/order/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"d8be98bd-68ba-4b3f-8340-af573f3636f6\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:11 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          198,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          198,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "3169abe9-ffbf-4626-b152-8ae19a25cb26",
          "length": 20,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8bc1a8d6-a502-4164-a012-cc3d4131496b",
          "scriptId": "5ed1d124-62a9-4f90-970c-508bb571b2ad",
          "execution": "7b770a5d-d78e-46de-8547-afd5bc0a3215"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "e68916bb-5173-4627-ae01-af0f9de738e8": [
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "DELETE"
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/store/order/<long>"
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"0b258981-7a0d-4057-9d4b-3f80d86d091e\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          405
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:12 GMT\",\n  \"content-type\": \"text/html\",\n  \"content-length\": \"150\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          199,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          199,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "e68916bb-5173-4627-ae01-af0f9de738e8",
          "length": 20,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "44d95bae-42be-46da-8375-2f5f324bf75c",
          "scriptId": "f755077e-d34e-4410-a4cf-b5b3a4b62d86",
          "execution": "604c935e-071e-4fdf-b894-eb9b9055fccb"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "6c154f26-cf2f-4bea-95f1-ea9be29a1165": [
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/user/createWithList"
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"fc818b40-2345-4491-9a2e-708530534d4f\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 446\n}"
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]"
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:12 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          189,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          189,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "6c154f26-cf2f-4bea-95f1-ea9be29a1165",
          "length": 20,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "05215fed-b9c4-4f76-9095-5e2e711cfb5e",
          "scriptId": "cdcc0ed1-469e-4524-94cf-573c1f25686b",
          "execution": "1e71a940-d622-4c05-9653-07fba4add74f"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "af380d20-0168-414b-bbfe-0a765aca5563": [
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/user/<string>"
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"cf911757-f7a1-4de8-ae4e-f01395f82b3d\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:12 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          163,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          163,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "af380d20-0168-414b-bbfe-0a765aca5563",
          "length": 20,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4cd616d-291c-4129-aab5-5303e27f73a0",
          "scriptId": "241c187e-16cb-4ca1-8eae-1d9376646235",
          "execution": "e2cf0471-d3e5-4365-8944-0f0bf05c7be8"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "dc7057c8-038e-4ae3-ad74-0ef0cffe3060": [
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "PUT"
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/user/<string>"
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"a9003464-6f9a-42df-8d16-6d6c3172c601\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 200\n}"
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          405
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:12 GMT\",\n  \"content-type\": \"text/html\",\n  \"content-length\": \"150\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          155,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          155,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "dc7057c8-038e-4ae3-ad74-0ef0cffe3060",
          "length": 20,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f0508180-dca6-4301-ae9d-803cf486593e",
          "scriptId": "eb60fc86-7482-4406-b503-0feaed1c23bd",
          "execution": "1f152ae6-443f-4958-975a-e70227b677fe"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "0b071c80-9f5c-4616-836c-4e7b466d6239": [
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "DELETE"
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/user/<string>"
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"ed11d11b-8003-40a9-8c42-f98639eac51a\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          405
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:13 GMT\",\n  \"content-type\": \"text/html\",\n  \"content-length\": \"150\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          153,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          153,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "0b071c80-9f5c-4616-836c-4e7b466d6239",
          "length": 20,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "834f5b11-afcd-4c06-86f6-3ecba6ab8cb6",
          "scriptId": "a1674d8a-c588-496e-a921-44ff62c68105",
          "execution": "68fb906f-a9d6-4e66-aa00-0968e713847e"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3": [
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/user/login?username=<string>&password=<string>"
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"accept\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"35e499b6-a637-40fb-b5ea-4133c34e7c79\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:13 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          191,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          191,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "bc3ffabd-50ce-4bb8-a3c6-b4a3d8a282a3",
          "length": 20,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "522ffca3-d6fd-4981-b908-b5d50cd9f55f",
          "scriptId": "ec5e2e50-995c-475c-85b8-a7fad3a6c282",
          "execution": "8f7cd103-8fb6-484d-badb-1c05aad9cfed"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "685df81c-569c-42fe-873a-6203ad7c81cf": [
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "GET"
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/user/logout"
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"5f55e4c9-fe1d-4599-a792-dd6175a5c40c\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Request Body:",
          ""
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:13 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          159,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          159,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "685df81c-569c-42fe-873a-6203ad7c81cf",
          "length": 20,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "874242ab-816f-4f29-9f0c-57870a05766d",
          "scriptId": "6faf545a-ef03-4c6a-9fb1-927d57638882",
          "execution": "4da2ac5f-c8a6-46df-a83b-5a3037256a89"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39": [
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/user/createWithArray"
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"959e02a5-54c4-48a8-92de-a6d1f3801895\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 446\n}"
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "[\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n  }\n]"
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:13 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          160,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          160,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "773b68a3-4a07-4e96-aca9-3e3ebf2a0f39",
          "length": 20,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cd8a56a4-3f8a-4859-bfad-ed69a83d05d5",
          "scriptId": "396ad3cb-2ecb-4f89-a0ea-c2e3cc0b871e",
          "execution": "d9fa8749-c34c-4d63-b9b6-4a1c1f04ca1a"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ],
    "088e4743-3a8c-4bdb-8ded-84950e824e4f": [
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Request Method:",
          "POST"
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Request URL:",
          "https://petstore.swagger.io/user"
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Request Headers:",
          "{\n  \"content-type\": \"application/json\",\n  \"user-agent\": \"PostmanRuntime/7.24.1\",\n  \"accept\": \"*/*\",\n  \"cache-control\": \"no-cache\",\n  \"postman-token\": \"b6727844-51df-43aa-81ec-84edd0b62e63\",\n  \"host\": \"petstore.swagger.io\",\n  \"accept-encoding\": \"gzip, deflate, br\",\n  \"connection\": \"keep-alive\",\n  \"content-length\": 200\n}"
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Request Body (raw):",
          "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Response Code:",
          404
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Response Headers:",
          "{\n  \"date\": \"Sun, 30 Jun 2024 01:11:13 GMT\",\n  \"content-type\": \"text/html\",\n  \"transfer-encoding\": \"chunked\",\n  \"connection\": \"keep-alive\",\n  \"server\": \"nginx\",\n  \"vary\": \"Accept-Encoding\",\n  \"access-control-allow-origin\": \"*\",\n  \"access-control-allow-methods\": \"GET, POST, OPTIONS\",\n  \"access-control-allow-headers\": \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\",\n  \"x-frame-options\": \"DENY\",\n  \"content-security-policy\": \"frame-ancestors 'none'\",\n  \"content-encoding\": \"gzip\"\n}"
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          156,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "warn",
        "messages": [
          "Não foi possível analisar o corpo da resposta como JSON: ",
          {
            "type": "Error",
            "name": "JSONError",
            "message": "Unexpected token '<' at 1:1\n<html>\n^"
          }
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Response Time:",
          156,
          "ms"
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "log",
        "messages": [
          "Content-Type:",
          "text/html"
        ]
      },
      {
        "cursor": {
          "ref": "088e4743-3a8c-4bdb-8ded-84950e824e4f",
          "length": 20,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef61192c-f683-42dd-b066-5058501be738",
          "scriptId": "a0afa0d9-c83b-458b-8627-167ba2451552",
          "execution": "76ccf1d9-b13e-414c-85fe-7bb15073200b"
        },
        "level": "error",
        "messages": [
          "Erro ao verificar o Content-Type:",
          {
            "name": "AssertionError",
            "message": "Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'",
            "showDiff": false,
            "actual": "text/html",
            "stack": "AssertionError: Expected Content-Type to include 'application/json', but got text/html: expected 'text/html' to include 'application/json'\n    at eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:60:35)\n    at n.test (evalmachine.<anonymous>:81:386)\n    at Object.eval (eval at exec (evalmachine.<anonymous>:13483:2548), <anonymous>:56:4)\n    at Uniscope.exec (evalmachine.<anonymous>:13483:2583)\n    at module.exports (evalmachine.<anonymous>:69:538)\n    at Object.<anonymous> (evalmachine.<anonymous>:72:1901)\n    at evalmachine.<anonymous>:16:26\n    at Array.forEach (<anonymous>)\n    at Object.emit (evalmachine.<anonymous>:15:54)\n    at evalmachine.<anonymous>:52:24"
          }
        ]
      }
    ]
  }
}